// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: mahjongXLCH.proto

package _go

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//番种
type XLCHFan int32

const (
	XLCHFan_F_XLCH_INVALID XLCHFan = 0 //无效番种
	//一番（x1）
	XLCHFan_F_XLCH_PINGHU  XLCHFan = 1 //平胡
	XLCHFan_F_XLCH_XIAYU   XLCHFan = 2 //下雨 (杠)
	XLCHFan_F_XLCH_GUAFENG XLCHFan = 3 //刮风(明杠)
	XLCHFan_F_XLCH_BAOYU   XLCHFan = 4 //下暴雨(暗杠)
	//两番（x2）
	XLCHFan_F_XLCH_DUIDUIHU XLCHFan = 5 //对对胡
	//三番（x4）
	XLCHFan_F_XLCH_QINGYISE  XLCHFan = 6 //清一色
	XLCHFan_F_XLCH_DAIYAOJIU XLCHFan = 7 //带幺九
	XLCHFan_F_XLCH_QIDUI     XLCHFan = 8 //七对
	//四番（x8）
	XLCHFan_F_XLCH_QINGDUI  XLCHFan = 9  //清对
	XLCHFan_F_XLCH_JIANGDUI XLCHFan = 10 //将对
	//五番（x16）
	XLCHFan_F_XLCH_LONGQIDUI  XLCHFan = 11 //龙七对
	XLCHFan_F_XLCH_QINGQIDUI  XLCHFan = 12 //清七对
	XLCHFan_F_XLCH_QINGYAOJIU XLCHFan = 13 //清幺九
	// 六番（x32）
	XLCHFan_F_XLCH_TIANHU        XLCHFan = 14 //天胡
	XLCHFan_F_XLCH_DIHU          XLCHFan = 15 //地胡
	XLCHFan_F_XLCH_QINGLONGQIDUI XLCHFan = 16 //清龙七对
)

// Enum value maps for XLCHFan.
var (
	XLCHFan_name = map[int32]string{
		0:  "F_XLCH_INVALID",
		1:  "F_XLCH_PINGHU",
		2:  "F_XLCH_XIAYU",
		3:  "F_XLCH_GUAFENG",
		4:  "F_XLCH_BAOYU",
		5:  "F_XLCH_DUIDUIHU",
		6:  "F_XLCH_QINGYISE",
		7:  "F_XLCH_DAIYAOJIU",
		8:  "F_XLCH_QIDUI",
		9:  "F_XLCH_QINGDUI",
		10: "F_XLCH_JIANGDUI",
		11: "F_XLCH_LONGQIDUI",
		12: "F_XLCH_QINGQIDUI",
		13: "F_XLCH_QINGYAOJIU",
		14: "F_XLCH_TIANHU",
		15: "F_XLCH_DIHU",
		16: "F_XLCH_QINGLONGQIDUI",
	}
	XLCHFan_value = map[string]int32{
		"F_XLCH_INVALID":       0,
		"F_XLCH_PINGHU":        1,
		"F_XLCH_XIAYU":         2,
		"F_XLCH_GUAFENG":       3,
		"F_XLCH_BAOYU":         4,
		"F_XLCH_DUIDUIHU":      5,
		"F_XLCH_QINGYISE":      6,
		"F_XLCH_DAIYAOJIU":     7,
		"F_XLCH_QIDUI":         8,
		"F_XLCH_QINGDUI":       9,
		"F_XLCH_JIANGDUI":      10,
		"F_XLCH_LONGQIDUI":     11,
		"F_XLCH_QINGQIDUI":     12,
		"F_XLCH_QINGYAOJIU":    13,
		"F_XLCH_TIANHU":        14,
		"F_XLCH_DIHU":          15,
		"F_XLCH_QINGLONGQIDUI": 16,
	}
)

func (x XLCHFan) Enum() *XLCHFan {
	p := new(XLCHFan)
	*p = x
	return p
}

func (x XLCHFan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XLCHFan) Descriptor() protoreflect.EnumDescriptor {
	return file_mahjongXLCH_proto_enumTypes[0].Descriptor()
}

func (XLCHFan) Type() protoreflect.EnumType {
	return &file_mahjongXLCH_proto_enumTypes[0]
}

func (x XLCHFan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XLCHFan.Descriptor instead.
func (XLCHFan) EnumDescriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{0}
}

//加番
type XLCHJFan int32

const (
	XLCHJFan_JF_XLCH_INVALID XLCHJFan = 0 //无效加番
	//加番
	XLCHJFan_JF_XLCH_GANGSHANGHUA XLCHJFan = 1 //杠上花
	XLCHJFan_JF_XLCH_GANGSHANGPAO XLCHJFan = 2 //杠上炮
	XLCHJFan_JF_XLCH_HAIDILAOYUE  XLCHJFan = 3 //海底捞月
)

// Enum value maps for XLCHJFan.
var (
	XLCHJFan_name = map[int32]string{
		0: "JF_XLCH_INVALID",
		1: "JF_XLCH_GANGSHANGHUA",
		2: "JF_XLCH_GANGSHANGPAO",
		3: "JF_XLCH_HAIDILAOYUE",
	}
	XLCHJFan_value = map[string]int32{
		"JF_XLCH_INVALID":      0,
		"JF_XLCH_GANGSHANGHUA": 1,
		"JF_XLCH_GANGSHANGPAO": 2,
		"JF_XLCH_HAIDILAOYUE":  3,
	}
)

func (x XLCHJFan) Enum() *XLCHJFan {
	p := new(XLCHJFan)
	*p = x
	return p
}

func (x XLCHJFan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XLCHJFan) Descriptor() protoreflect.EnumDescriptor {
	return file_mahjongXLCH_proto_enumTypes[1].Descriptor()
}

func (XLCHJFan) Type() protoreflect.EnumType {
	return &file_mahjongXLCH_proto_enumTypes[1]
}

func (x XLCHJFan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XLCHJFan.Descriptor instead.
func (XLCHJFan) EnumDescriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{1}
}

// kindID 3008
////////////////////血流成河介绍/////////////////////////////
//    血战到底：玩家胡了并不结束这局，继续打,直至所有牌摸完。这样先胡的不一定获利最多，点炮的也能翻身，提高了博弈性和趣味性。牌局结束，一并结算。
//    刮风下雨：杠在结算时算钱。
//    庄家：第一局随意，以后每一局由上一局第一个胡牌者当庄，若是一炮双响或一炮三响，由放炮者当庄。
//    甩色子：由庄家掷两枚骰子以确定端牌的起始位置。12换右 34换对家 56换左
//    跳牌：庄家摸第14张牌时需隔一沓牌摸上面一张，此谓跳牌。
//    定张：在一局的开始定下不要哪门牌，以后不能改。一般将一张此颜色的牌面朝下摆放，第一轮打出。
//    缺（天缺）：一局开始摸上牌后就只有两门牌甚至一门牌，此时报缺。
//    搭子（坎）：三张数字连续的牌或三张相同的牌称为一个搭子或一坎牌。
//    堂子：牌桌上打出的牌堆
//    将：胡牌时的一对牌。
//    下叫：听牌。缺一门，四个搭子加一对将即可胡牌。
//    死叫：下的叫实际上不能胡（所有能胡的牌都已经现出）
//    根（音gēn，通常儿化为gēr，某些地方念成guī）：杠，或者四张相同未成杠（四归一）。
//    张子：指某张特定的牌。如：二条这个张子怎么能松哦？
//    绝张（金张）：四张牌已经现了三张，最后一张称为绝张。
//    自抠（自逮，自摸）：胡自己摸上的牌。
//    放炮（点炮）：打出的牌被他人胡了。
//    格：指牌型的大小。
//    满格（极品）：实际中基础牌型一般8倍封顶，为满格。
//    查叫：一局结束时，有两家或以上未胡牌，此时查叫。无叫的给有叫的赔叫（赔大或赔小需自行商定，死叫算不算叫需自行商定）。若无叫，杠不计算。
//    花猫（花猪）：查叫时手中还有三色牌。花猫给所有未胡且非花猫的人赔满格。
//    ----牌值由万 筒 条组成---
/////////////////////番型解义(请看文件末部)///////////////////
//刻子
type MahjongXLCHKeZi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []int32   `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`
	Code  MJOperate `protobuf:"varint,2,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"`
	Gen   int32     `protobuf:"varint,3,opt,name=Gen,proto3" json:"Gen,omitempty"`     //带根
	ByUid uint64    `protobuf:"varint,4,opt,name=ByUid,proto3" json:"ByUid,omitempty"` // 由谁提供
}

func (x *MahjongXLCHKeZi) Reset() {
	*x = MahjongXLCHKeZi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHKeZi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHKeZi) ProtoMessage() {}

func (x *MahjongXLCHKeZi) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHKeZi.ProtoReflect.Descriptor instead.
func (*MahjongXLCHKeZi) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{0}
}

func (x *MahjongXLCHKeZi) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MahjongXLCHKeZi) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongXLCHKeZi) GetGen() int32 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *MahjongXLCHKeZi) GetByUid() uint64 {
	if x != nil {
		return x.ByUid
	}
	return 0
}

//提示
type MahjongXLCHHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  MJOperate `protobuf:"varint,1,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码
	Cards []int32   `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 听哪几张牌| 胡牌和自摸皆为一张
	ByUid uint64    `protobuf:"varint,3,opt,name=ByUid,proto3" json:"ByUid,omitempty"`                 // 由谁提供
}

func (x *MahjongXLCHHint) Reset() {
	*x = MahjongXLCHHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHHint) ProtoMessage() {}

func (x *MahjongXLCHHint) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHHint.ProtoReflect.Descriptor instead.
func (*MahjongXLCHHint) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{1}
}

func (x *MahjongXLCHHint) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongXLCHHint) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MahjongXLCHHint) GetByUid() uint64 {
	if x != nil {
		return x.ByUid
	}
	return 0
}

//结算
type MahjongXLCHSettle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fan       XLCHFan  `protobuf:"varint,1,opt,name=Fan,proto3,enum=go.XLCHFan" json:"Fan,omitempty"`    // 番型
	JFan      XLCHJFan `protobuf:"varint,2,opt,name=JFan,proto3,enum=go.XLCHJFan" json:"JFan,omitempty"` // 加番
	Gen       int32    `protobuf:"varint,3,opt,name=Gen,proto3" json:"Gen,omitempty"`                    // 带根数目
	GainScore int64    `protobuf:"varint,4,opt,name=GainScore,proto3" json:"GainScore,omitempty"`        // 输赢分值
	WinID     uint64   `protobuf:"varint,5,opt,name=WinID,proto3" json:"WinID,omitempty"`                // 赢家ID
}

func (x *MahjongXLCHSettle) Reset() {
	*x = MahjongXLCHSettle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHSettle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHSettle) ProtoMessage() {}

func (x *MahjongXLCHSettle) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHSettle.ProtoReflect.Descriptor instead.
func (*MahjongXLCHSettle) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{2}
}

func (x *MahjongXLCHSettle) GetFan() XLCHFan {
	if x != nil {
		return x.Fan
	}
	return XLCHFan_F_XLCH_INVALID
}

func (x *MahjongXLCHSettle) GetJFan() XLCHJFan {
	if x != nil {
		return x.JFan
	}
	return XLCHJFan_JF_XLCH_INVALID
}

func (x *MahjongXLCHSettle) GetGen() int32 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *MahjongXLCHSettle) GetGainScore() int64 {
	if x != nil {
		return x.GainScore
	}
	return 0
}

func (x *MahjongXLCHSettle) GetWinID() uint64 {
	if x != nil {
		return x.WinID
	}
	return 0
}

//麻将玩家信息
type MahjongXLCHPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyInfo     *PlayerInfo          `protobuf:"bytes,1,opt,name=MyInfo,proto3" json:"MyInfo,omitempty"`                        //
	HandCards  []int32              `protobuf:"varint,2,rep,packed,name=HandCards,proto3" json:"HandCards,omitempty"`          //手牌
	KeZiCards  []*MahjongXLCHKeZi   `protobuf:"bytes,3,rep,name=KeZiCards,proto3" json:"KeZiCards,omitempty"`                  // 桌牌:明在桌面上的牌,即碰、杠、胡的牌
	TableCards []int32              `protobuf:"varint,4,rep,packed,name=TableCards,proto3" json:"TableCards,omitempty"`        // 玩家的桌面牌值
	IsHu       bool                 `protobuf:"varint,5,opt,name=IsHu,proto3" json:"IsHu,omitempty"`                           // 是否胡牌
	IsHuaZhu   bool                 `protobuf:"varint,6,opt,name=IsHuaZhu,proto3" json:"IsHuaZhu,omitempty"`                   // 是否花猪 查花猪
	IsTing     bool                 `protobuf:"varint,7,opt,name=IsTing,proto3" json:"IsTing,omitempty"`                       // 是否听牌 查叫
	QueMen     int32                `protobuf:"varint,8,opt,name=QueMen,proto3" json:"QueMen,omitempty"`                       // 定张 0:无效 1:万 2:筒 3:条
	Settles    []*MahjongXLCHSettle `protobuf:"bytes,9,rep,name=Settles,proto3" json:"Settles,omitempty"`                      // 每次结算记录
	TotalScore int64                `protobuf:"varint,10,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`              // 总积分(当不为系统房时,该分值可以为负分)
	SitDirect  Direct               `protobuf:"varint,11,opt,name=SitDirect,proto3,enum=go.Direct" json:"SitDirect,omitempty"` // 座位方位
	OpHints    []*MahjongXLCHHint   `protobuf:"bytes,12,rep,name=OpHints,proto3" json:"OpHints,omitempty"`                     //玩家可操作(恢复场景)
}

func (x *MahjongXLCHPlayer) Reset() {
	*x = MahjongXLCHPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHPlayer) ProtoMessage() {}

func (x *MahjongXLCHPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHPlayer.ProtoReflect.Descriptor instead.
func (*MahjongXLCHPlayer) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{3}
}

func (x *MahjongXLCHPlayer) GetMyInfo() *PlayerInfo {
	if x != nil {
		return x.MyInfo
	}
	return nil
}

func (x *MahjongXLCHPlayer) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *MahjongXLCHPlayer) GetKeZiCards() []*MahjongXLCHKeZi {
	if x != nil {
		return x.KeZiCards
	}
	return nil
}

func (x *MahjongXLCHPlayer) GetTableCards() []int32 {
	if x != nil {
		return x.TableCards
	}
	return nil
}

func (x *MahjongXLCHPlayer) GetIsHu() bool {
	if x != nil {
		return x.IsHu
	}
	return false
}

func (x *MahjongXLCHPlayer) GetIsHuaZhu() bool {
	if x != nil {
		return x.IsHuaZhu
	}
	return false
}

func (x *MahjongXLCHPlayer) GetIsTing() bool {
	if x != nil {
		return x.IsTing
	}
	return false
}

func (x *MahjongXLCHPlayer) GetQueMen() int32 {
	if x != nil {
		return x.QueMen
	}
	return 0
}

func (x *MahjongXLCHPlayer) GetSettles() []*MahjongXLCHSettle {
	if x != nil {
		return x.Settles
	}
	return nil
}

func (x *MahjongXLCHPlayer) GetTotalScore() int64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *MahjongXLCHPlayer) GetSitDirect() Direct {
	if x != nil {
		return x.SitDirect
	}
	return Direct_Centre
}

func (x *MahjongXLCHPlayer) GetOpHints() []*MahjongXLCHHint {
	if x != nil {
		return x.OpHints
	}
	return nil
}

//入场
type EnterGameMJXLCHResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID   uint64             `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`     //游戏标识
	ChairNum uint32             `protobuf:"varint,2,opt,name=ChairNum,proto3" json:"ChairNum,omitempty"` //椅子编号(不满足req的此项时,将由系统分配,并返回提示)
	Player   *MahjongXLCHPlayer `protobuf:"bytes,3,opt,name=Player,proto3" json:"Player,omitempty"`
}

func (x *EnterGameMJXLCHResp) Reset() {
	*x = EnterGameMJXLCHResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterGameMJXLCHResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterGameMJXLCHResp) ProtoMessage() {}

func (x *EnterGameMJXLCHResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterGameMJXLCHResp.ProtoReflect.Descriptor instead.
func (*EnterGameMJXLCHResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{4}
}

func (x *EnterGameMJXLCHResp) GetGameID() uint64 {
	if x != nil {
		return x.GameID
	}
	return 0
}

func (x *EnterGameMJXLCHResp) GetChairNum() uint32 {
	if x != nil {
		return x.ChairNum
	}
	return 0
}

func (x *EnterGameMJXLCHResp) GetPlayer() *MahjongXLCHPlayer {
	if x != nil {
		return x.Player
	}
	return nil
}

//场景
type MahjongXLCHSceneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp   int64                `protobuf:"varint,1,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`     // 时间戳
	RunCount    int32                `protobuf:"varint,2,opt,name=RunCount,proto3" json:"RunCount,omitempty"`       // 当前局数
	RemainCount int32                `protobuf:"varint,3,opt,name=RemainCount,proto3" json:"RemainCount,omitempty"` // 剩余张数
	BankerID    uint64               `protobuf:"varint,4,opt,name=BankerID,proto3" json:"BankerID,omitempty"`       // 庄家ID
	CurrentID   uint64               `protobuf:"varint,5,opt,name=CurrentID,proto3" json:"CurrentID,omitempty"`     // 当前玩家ID
	Inning      string               `protobuf:"bytes,6,opt,name=Inning,proto3" json:"Inning,omitempty"`            // 牌局号
	HuCard      int32                `protobuf:"varint,7,opt,name=HuCard,proto3" json:"HuCard,omitempty"`           // 胡牌,或自摸时的摸起的最后一张
	StartPos    int32                `protobuf:"varint,8,opt,name=StartPos,proto3" json:"StartPos,omitempty"`       // 抓牌起始位置(即保留不抓取的牌墙)
	AllPlayers  []*MahjongXLCHPlayer `protobuf:"bytes,9,rep,name=AllPlayers,proto3" json:"AllPlayers,omitempty"`    //玩家列表
}

func (x *MahjongXLCHSceneResp) Reset() {
	*x = MahjongXLCHSceneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHSceneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHSceneResp) ProtoMessage() {}

func (x *MahjongXLCHSceneResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHSceneResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHSceneResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{5}
}

func (x *MahjongXLCHSceneResp) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *MahjongXLCHSceneResp) GetRunCount() int32 {
	if x != nil {
		return x.RunCount
	}
	return 0
}

func (x *MahjongXLCHSceneResp) GetRemainCount() int32 {
	if x != nil {
		return x.RemainCount
	}
	return 0
}

func (x *MahjongXLCHSceneResp) GetBankerID() uint64 {
	if x != nil {
		return x.BankerID
	}
	return 0
}

func (x *MahjongXLCHSceneResp) GetCurrentID() uint64 {
	if x != nil {
		return x.CurrentID
	}
	return 0
}

func (x *MahjongXLCHSceneResp) GetInning() string {
	if x != nil {
		return x.Inning
	}
	return ""
}

func (x *MahjongXLCHSceneResp) GetHuCard() int32 {
	if x != nil {
		return x.HuCard
	}
	return 0
}

func (x *MahjongXLCHSceneResp) GetStartPos() int32 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

func (x *MahjongXLCHSceneResp) GetAllPlayers() []*MahjongXLCHPlayer {
	if x != nil {
		return x.AllPlayers
	}
	return nil
}

//状态
// 服务端推送
//(空闲 - Free)
type MahjongXLCHStateFreeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times  *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	Inning string    `protobuf:"bytes,2,opt,name=Inning,proto3" json:"Inning,omitempty"` // 牌局号
}

func (x *MahjongXLCHStateFreeResp) Reset() {
	*x = MahjongXLCHStateFreeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHStateFreeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHStateFreeResp) ProtoMessage() {}

func (x *MahjongXLCHStateFreeResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHStateFreeResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHStateFreeResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{6}
}

func (x *MahjongXLCHStateFreeResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXLCHStateFreeResp) GetInning() string {
	if x != nil {
		return x.Inning
	}
	return ""
}

//定庄 - Decide系统 定庄 定座次
type MahjongXLCHDecideResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankerID uint64 `protobuf:"varint,1,opt,name=BankerID,proto3" json:"BankerID,omitempty"` // 首局默认座位东方的为庄家
}

func (x *MahjongXLCHDecideResp) Reset() {
	*x = MahjongXLCHDecideResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHDecideResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHDecideResp) ProtoMessage() {}

func (x *MahjongXLCHDecideResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHDecideResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHDecideResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{7}
}

func (x *MahjongXLCHDecideResp) GetBankerID() uint64 {
	if x != nil {
		return x.BankerID
	}
	return 0
}

type MahjongXLCHSitDirectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`                      //
	SitDirect Direct `protobuf:"varint,2,opt,name=SitDirect,proto3,enum=go.Direct" json:"SitDirect,omitempty"` // 玩家方位
}

func (x *MahjongXLCHSitDirectResp) Reset() {
	*x = MahjongXLCHSitDirectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHSitDirectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHSitDirectResp) ProtoMessage() {}

func (x *MahjongXLCHSitDirectResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHSitDirectResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHSitDirectResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{8}
}

func (x *MahjongXLCHSitDirectResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXLCHSitDirectResp) GetSitDirect() Direct {
	if x != nil {
		return x.SitDirect
	}
	return Direct_Centre
}

//开始掷骰子 - RollDice 注:决定牌堆的起始位置
type MahjongXLCHStateRollDiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongXLCHStateRollDiceResp) Reset() {
	*x = MahjongXLCHStateRollDiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHStateRollDiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHStateRollDiceResp) ProtoMessage() {}

func (x *MahjongXLCHStateRollDiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHStateRollDiceResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHStateRollDiceResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{9}
}

func (x *MahjongXLCHStateRollDiceResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//发牌(开始游戏) - Start
type MahjongXLCHStateStartResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times    *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	StartPos int32     `protobuf:"varint,2,opt,name=StartPos,proto3" json:"StartPos,omitempty"` //抓牌起始位置(即保留不抓取的牌墙)
}

func (x *MahjongXLCHStateStartResp) Reset() {
	*x = MahjongXLCHStateStartResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHStateStartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHStateStartResp) ProtoMessage() {}

func (x *MahjongXLCHStateStartResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHStateStartResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHStateStartResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{10}
}

func (x *MahjongXLCHStateStartResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXLCHStateStartResp) GetStartPos() int32 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

//换三张 骰子之和取6余数+1  换右:12  换对家:34  换左56
type MahjongXLCHStateExchangeThreeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongXLCHStateExchangeThreeResp) Reset() {
	*x = MahjongXLCHStateExchangeThreeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHStateExchangeThreeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHStateExchangeThreeResp) ProtoMessage() {}

func (x *MahjongXLCHStateExchangeThreeResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHStateExchangeThreeResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHStateExchangeThreeResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{11}
}

func (x *MahjongXLCHStateExchangeThreeResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//定缺门
type MahjongXLCHStateDingQueResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times      *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	MyCards    []int32   `protobuf:"varint,2,rep,packed,name=MyCards,proto3" json:"MyCards,omitempty"`       // 提供给别人
	OtherCards []int32   `protobuf:"varint,3,rep,packed,name=OtherCards,proto3" json:"OtherCards,omitempty"` // 从别人中获取的
}

func (x *MahjongXLCHStateDingQueResp) Reset() {
	*x = MahjongXLCHStateDingQueResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHStateDingQueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHStateDingQueResp) ProtoMessage() {}

func (x *MahjongXLCHStateDingQueResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHStateDingQueResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHStateDingQueResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{12}
}

func (x *MahjongXLCHStateDingQueResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXLCHStateDingQueResp) GetMyCards() []int32 {
	if x != nil {
		return x.MyCards
	}
	return nil
}

func (x *MahjongXLCHStateDingQueResp) GetOtherCards() []int32 {
	if x != nil {
		return x.OtherCards
	}
	return nil
}

//(游戏中) - Playing
type MahjongXLCHStatePlayingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times  *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	UserID uint64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"` // 轮到谁
	Card   int32     `protobuf:"varint,3,opt,name=Card,proto3" json:"Card,omitempty"`     // 只有UserID的玩家有牌值
}

func (x *MahjongXLCHStatePlayingResp) Reset() {
	*x = MahjongXLCHStatePlayingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHStatePlayingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHStatePlayingResp) ProtoMessage() {}

func (x *MahjongXLCHStatePlayingResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHStatePlayingResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHStatePlayingResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{13}
}

func (x *MahjongXLCHStatePlayingResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXLCHStatePlayingResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXLCHStatePlayingResp) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

//等待操作(仅对有提示的玩家提供)
type MahjongXLCHStateWaitOperateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongXLCHStateWaitOperateResp) Reset() {
	*x = MahjongXLCHStateWaitOperateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHStateWaitOperateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHStateWaitOperateResp) ProtoMessage() {}

func (x *MahjongXLCHStateWaitOperateResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHStateWaitOperateResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHStateWaitOperateResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{14}
}

func (x *MahjongXLCHStateWaitOperateResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//(开奖) - Opening
type MahjongXLCHStateOpenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times      *TimeInfo            `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	OpCard     int32                `protobuf:"varint,2,opt,name=OpCard,proto3" json:"OpCard,omitempty"`       //下雨 胡牌,或自摸时的摸起的最后一张
	Fan        int32                `protobuf:"varint,3,opt,name=Fan,proto3" json:"Fan,omitempty"`             //番型
	GainScore  int64                `protobuf:"varint,4,opt,name=GainScore,proto3" json:"GainScore,omitempty"` //收益
	WinnerID   uint64               `protobuf:"varint,5,opt,name=WinnerID,proto3" json:"WinnerID,omitempty"`
	AllPlayers []*MahjongXLCHPlayer `protobuf:"bytes,6,rep,name=AllPlayers,proto3" json:"AllPlayers,omitempty"` //所有玩家得分
}

func (x *MahjongXLCHStateOpenResp) Reset() {
	*x = MahjongXLCHStateOpenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHStateOpenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHStateOpenResp) ProtoMessage() {}

func (x *MahjongXLCHStateOpenResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHStateOpenResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHStateOpenResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{15}
}

func (x *MahjongXLCHStateOpenResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXLCHStateOpenResp) GetOpCard() int32 {
	if x != nil {
		return x.OpCard
	}
	return 0
}

func (x *MahjongXLCHStateOpenResp) GetFan() int32 {
	if x != nil {
		return x.Fan
	}
	return 0
}

func (x *MahjongXLCHStateOpenResp) GetGainScore() int64 {
	if x != nil {
		return x.GainScore
	}
	return 0
}

func (x *MahjongXLCHStateOpenResp) GetWinnerID() uint64 {
	if x != nil {
		return x.WinnerID
	}
	return 0
}

func (x *MahjongXLCHStateOpenResp) GetAllPlayers() []*MahjongXLCHPlayer {
	if x != nil {
		return x.AllPlayers
	}
	return nil
}

//(结束) - Over
type MahjongXLCHStateOverResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times      *TimeInfo            `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	AllPlayers []*MahjongXLCHPlayer `protobuf:"bytes,2,rep,name=AllPlayers,proto3" json:"AllPlayers,omitempty"` //所有玩家得分 包含是否听 或花猪
}

func (x *MahjongXLCHStateOverResp) Reset() {
	*x = MahjongXLCHStateOverResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHStateOverResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHStateOverResp) ProtoMessage() {}

func (x *MahjongXLCHStateOverResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHStateOverResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHStateOverResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{16}
}

func (x *MahjongXLCHStateOverResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXLCHStateOverResp) GetAllPlayers() []*MahjongXLCHPlayer {
	if x != nil {
		return x.AllPlayers
	}
	return nil
}

//查叫 没有听牌 等待退款
type MahjongXLCHStateTingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times   *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	NoTings []uint64  `protobuf:"varint,2,rep,packed,name=NoTings,proto3" json:"NoTings,omitempty"`
}

func (x *MahjongXLCHStateTingResp) Reset() {
	*x = MahjongXLCHStateTingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHStateTingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHStateTingResp) ProtoMessage() {}

func (x *MahjongXLCHStateTingResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHStateTingResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHStateTingResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{17}
}

func (x *MahjongXLCHStateTingResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXLCHStateTingResp) GetNoTings() []uint64 {
	if x != nil {
		return x.NoTings
	}
	return nil
}

//查花猪 手牌中仍有三种花色 等待结算
type MahjongXLCHStateHuaZhuResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times  *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	HuaZhu []uint64  `protobuf:"varint,2,rep,packed,name=HuaZhu,proto3" json:"HuaZhu,omitempty"`
}

func (x *MahjongXLCHStateHuaZhuResp) Reset() {
	*x = MahjongXLCHStateHuaZhuResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHStateHuaZhuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHStateHuaZhuResp) ProtoMessage() {}

func (x *MahjongXLCHStateHuaZhuResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHStateHuaZhuResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHStateHuaZhuResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{18}
}

func (x *MahjongXLCHStateHuaZhuResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXLCHStateHuaZhuResp) GetHuaZhu() []uint64 {
	if x != nil {
		return x.HuaZhu
	}
	return nil
}

//////////////////////////////////////////////
//发牌
type MahjongXLCHDealResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    uint64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`              // 玩家ID
	CurPos    int32   `protobuf:"varint,2,opt,name=CurPos,proto3" json:"CurPos,omitempty"`              // 抓牌起始位置
	HandCards []int32 `protobuf:"varint,3,rep,packed,name=HandCards,proto3" json:"HandCards,omitempty"` // 玩家的手牌(座位上的玩家才有,且只能拿到自己的牌值)
}

func (x *MahjongXLCHDealResp) Reset() {
	*x = MahjongXLCHDealResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHDealResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHDealResp) ProtoMessage() {}

func (x *MahjongXLCHDealResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHDealResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHDealResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{19}
}

func (x *MahjongXLCHDealResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXLCHDealResp) GetCurPos() int32 {
	if x != nil {
		return x.CurPos
	}
	return 0
}

func (x *MahjongXLCHDealResp) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

//////////////////////////////////////////////
//准备
type MahjongXLCHReadyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReady bool `protobuf:"varint,1,opt,name=IsReady,proto3" json:"IsReady,omitempty"` // 玩家准备，可以取消准备
}

func (x *MahjongXLCHReadyReq) Reset() {
	*x = MahjongXLCHReadyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHReadyReq) ProtoMessage() {}

func (x *MahjongXLCHReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHReadyReq.ProtoReflect.Descriptor instead.
func (*MahjongXLCHReadyReq) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{20}
}

func (x *MahjongXLCHReadyReq) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

type MahjongXLCHReadyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IsReady bool   `protobuf:"varint,2,opt,name=IsReady,proto3" json:"IsReady,omitempty"` // 玩家准备，可以取消准备
}

func (x *MahjongXLCHReadyResp) Reset() {
	*x = MahjongXLCHReadyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHReadyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHReadyResp) ProtoMessage() {}

func (x *MahjongXLCHReadyResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHReadyResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHReadyResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{21}
}

func (x *MahjongXLCHReadyResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXLCHReadyResp) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

//扔骰子
type MahjongXLCHRollReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongXLCHRollReq) Reset() {
	*x = MahjongXLCHRollReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHRollReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHRollReq) ProtoMessage() {}

func (x *MahjongXLCHRollReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHRollReq.ProtoReflect.Descriptor instead.
func (*MahjongXLCHRollReq) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{22}
}

type MahjongXLCHRollResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Dice   []byte `protobuf:"bytes,2,opt,name=Dice,proto3" json:"Dice,omitempty"` //骰子决定,起抓牌位置
}

func (x *MahjongXLCHRollResp) Reset() {
	*x = MahjongXLCHRollResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHRollResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHRollResp) ProtoMessage() {}

func (x *MahjongXLCHRollResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHRollResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHRollResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{23}
}

func (x *MahjongXLCHRollResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXLCHRollResp) GetDice() []byte {
	if x != nil {
		return x.Dice
	}
	return nil
}

//请求换三张
type MahjongXLCHExchangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandCards []int32 `protobuf:"varint,1,rep,packed,name=HandCards,proto3" json:"HandCards,omitempty"` // 玩家请求换的三张牌
}

func (x *MahjongXLCHExchangeReq) Reset() {
	*x = MahjongXLCHExchangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHExchangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHExchangeReq) ProtoMessage() {}

func (x *MahjongXLCHExchangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHExchangeReq.ProtoReflect.Descriptor instead.
func (*MahjongXLCHExchangeReq) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{24}
}

func (x *MahjongXLCHExchangeReq) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

type MahjongXLCHExchangeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    uint64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`              // 玩家ID
	HandCards []int32 `protobuf:"varint,2,rep,packed,name=HandCards,proto3" json:"HandCards,omitempty"` // 玩家的手牌(座位上的玩家才有,且只能拿到自己的牌值)
}

func (x *MahjongXLCHExchangeResp) Reset() {
	*x = MahjongXLCHExchangeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHExchangeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHExchangeResp) ProtoMessage() {}

func (x *MahjongXLCHExchangeResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHExchangeResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHExchangeResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{25}
}

func (x *MahjongXLCHExchangeResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXLCHExchangeResp) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

//定缺门
type MahjongXLCHQueMenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueMen int32 `protobuf:"varint,1,opt,name=QueMen,proto3" json:"QueMen,omitempty"` //0:默认 1:万 2:筒 3:条
}

func (x *MahjongXLCHQueMenReq) Reset() {
	*x = MahjongXLCHQueMenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHQueMenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHQueMenReq) ProtoMessage() {}

func (x *MahjongXLCHQueMenReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHQueMenReq.ProtoReflect.Descriptor instead.
func (*MahjongXLCHQueMenReq) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{26}
}

func (x *MahjongXLCHQueMenReq) GetQueMen() int32 {
	if x != nil {
		return x.QueMen
	}
	return 0
}

type MahjongXLCHQueMenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"` // 玩家ID
	QueMen int32  `protobuf:"varint,2,opt,name=QueMen,proto3" json:"QueMen,omitempty"` //0:默认 1:万 2:筒 3:条
}

func (x *MahjongXLCHQueMenResp) Reset() {
	*x = MahjongXLCHQueMenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHQueMenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHQueMenResp) ProtoMessage() {}

func (x *MahjongXLCHQueMenResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHQueMenResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHQueMenResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{27}
}

func (x *MahjongXLCHQueMenResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXLCHQueMenResp) GetQueMen() int32 {
	if x != nil {
		return x.QueMen
	}
	return 0
}

// 玩家打出去的牌
type MahjongXLCHOutCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card int32 `protobuf:"varint,1,opt,name=Card,proto3" json:"Card,omitempty"` //
}

func (x *MahjongXLCHOutCardReq) Reset() {
	*x = MahjongXLCHOutCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHOutCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHOutCardReq) ProtoMessage() {}

func (x *MahjongXLCHOutCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHOutCardReq.ProtoReflect.Descriptor instead.
func (*MahjongXLCHOutCardReq) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{28}
}

func (x *MahjongXLCHOutCardReq) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

type MahjongXLCHOutCardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"` // 玩家ID
	Card   int32  `protobuf:"varint,2,opt,name=Card,proto3" json:"Card,omitempty"`     //
}

func (x *MahjongXLCHOutCardResp) Reset() {
	*x = MahjongXLCHOutCardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHOutCardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHOutCardResp) ProtoMessage() {}

func (x *MahjongXLCHOutCardResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHOutCardResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHOutCardResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{29}
}

func (x *MahjongXLCHOutCardResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXLCHOutCardResp) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

// 操作
type MahjongXLCHOperateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  MJOperate `protobuf:"varint,1,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码 pass表示弃牌
	Cards []int32   `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 碰|杠|胡|自摸 时的手牌
}

func (x *MahjongXLCHOperateReq) Reset() {
	*x = MahjongXLCHOperateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHOperateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHOperateReq) ProtoMessage() {}

func (x *MahjongXLCHOperateReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHOperateReq.ProtoReflect.Descriptor instead.
func (*MahjongXLCHOperateReq) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{30}
}

func (x *MahjongXLCHOperateReq) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongXLCHOperateReq) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

type MahjongXLCHOperateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`               // 玩家ID
	Code   MJOperate `protobuf:"varint,2,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码
	Cards  []int32   `protobuf:"varint,3,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 碰|杠|胡|自摸 时的组合牌
}

func (x *MahjongXLCHOperateResp) Reset() {
	*x = MahjongXLCHOperateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHOperateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHOperateResp) ProtoMessage() {}

func (x *MahjongXLCHOperateResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHOperateResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHOperateResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{31}
}

func (x *MahjongXLCHOperateResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXLCHOperateResp) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongXLCHOperateResp) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 玩家只能收到自己的
type MahjongXLCHHintResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64             `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"` // 玩家ID
	Hints  []*MahjongXLCHHint `protobuf:"bytes,2,rep,name=Hints,proto3" json:"Hints,omitempty"`    //提示 注意:吃牌时,有多种组合 cards仅提供玩家手牌牌值
}

func (x *MahjongXLCHHintResp) Reset() {
	*x = MahjongXLCHHintResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXLCH_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXLCHHintResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXLCHHintResp) ProtoMessage() {}

func (x *MahjongXLCHHintResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXLCH_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXLCHHintResp.ProtoReflect.Descriptor instead.
func (*MahjongXLCHHintResp) Descriptor() ([]byte, []int) {
	return file_mahjongXLCH_proto_rawDescGZIP(), []int{32}
}

func (x *MahjongXLCHHintResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXLCHHintResp) GetHints() []*MahjongXLCHHint {
	if x != nil {
		return x.Hints
	}
	return nil
}

var File_mahjongXLCH_proto protoreflect.FileDescriptor

var file_mahjongXLCH_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x67, 0x6f, 0x1a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x0f, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x4b, 0x65, 0x5a, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x47, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x55, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x42, 0x79, 0x55, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x0f, 0x4d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67,
	0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x55, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x42, 0x79, 0x55, 0x69, 0x64, 0x22, 0x9a, 0x01,
	0x0a, 0x11, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x46, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x2e, 0x58, 0x4c, 0x43, 0x48, 0x46, 0x61, 0x6e, 0x52, 0x03, 0x46,
	0x61, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x4a, 0x46, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x58, 0x4c, 0x43, 0x48, 0x4a, 0x46, 0x61, 0x6e, 0x52, 0x04,
	0x4a, 0x46, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x47, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x69, 0x6e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x61, 0x69, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x57, 0x69, 0x6e, 0x49, 0x44, 0x22, 0xb6, 0x03, 0x0a, 0x11, 0x4d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x06, 0x4d, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x4d, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x48, 0x61, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x4b, 0x65, 0x5a, 0x69, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x2e, 0x4d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x4b, 0x65, 0x5a, 0x69, 0x52, 0x09,
	0x4b, 0x65, 0x5a, 0x69, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x73, 0x48,
	0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x73, 0x48, 0x75, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x73, 0x48, 0x75, 0x61, 0x5a, 0x68, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x49, 0x73, 0x48, 0x75, 0x61, 0x5a, 0x68, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x54,
	0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x54, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x51, 0x75, 0x65, 0x4d, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x51, 0x75, 0x65, 0x4d, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x2e,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x07, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x53, 0x69,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x09, 0x53, 0x69, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x4f, 0x70, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x4f, 0x70, 0x48, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x78, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x4a, 0x58, 0x4c, 0x43, 0x48, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x2d,
	0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xaf, 0x02,
	0x0a, 0x14, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x75, 0x43, 0x61, 0x72, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x75, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67,
	0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x0a, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22,
	0x56, 0x0a, 0x18, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x33, 0x0a, 0x15, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x18,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x53, 0x69, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x09, 0x53, 0x69, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52,
	0x09, 0x53, 0x69, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0x42, 0x0a, 0x1c, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x6c, 0x44, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x5b,
	0x0a, 0x19, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x22, 0x47, 0x0a, 0x21, 0x4d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x1b, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58,
	0x4c, 0x43, 0x48, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x79, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x79, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x22, 0x6d, 0x0a, 0x1b, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64,
	0x22, 0x45, 0x0a, 0x1f, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x46, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x46,
	0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x0a,
	0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43,
	0x48, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x22, 0x75, 0x0a, 0x18, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c,
	0x43, 0x48, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a,
	0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x58, 0x0a, 0x18, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f,
	0x54, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x4e, 0x6f, 0x54,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x58, 0x0a, 0x1a, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58,
	0x4c, 0x43, 0x48, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x75, 0x61, 0x5a, 0x68, 0x75, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x75, 0x61, 0x5a, 0x68, 0x75,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x48, 0x75, 0x61, 0x5a, 0x68, 0x75, 0x22, 0x63,
	0x0a, 0x13, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x44, 0x65, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x43, 0x75, 0x72, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43,
	0x75, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x13, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c,
	0x43, 0x48, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x22, 0x48, 0x0a, 0x14, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58,
	0x4c, 0x43, 0x48, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x14,
	0x0a, 0x12, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x52, 0x6f, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x22, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58,
	0x4c, 0x43, 0x48, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x44, 0x69, 0x63, 0x65, 0x22, 0x36, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22,
	0x4f, 0x0a, 0x17, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x2e, 0x0a, 0x14, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x51,
	0x75, 0x65, 0x4d, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x51, 0x75, 0x65, 0x4d,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x51, 0x75, 0x65, 0x4d, 0x65, 0x6e,
	0x22, 0x47, 0x0a, 0x15, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x51,
	0x75, 0x65, 0x4d, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x51, 0x75, 0x65, 0x4d, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x51, 0x75, 0x65, 0x4d, 0x65, 0x6e, 0x22, 0x2b, 0x0a, 0x15, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x22, 0x44, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x58, 0x4c, 0x43, 0x48, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x22, 0x50, 0x0a, 0x15,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x69,
	0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x58, 0x0a, 0x13, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x05, 0x48, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x4c, 0x43, 0x48, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x48, 0x69,
	0x6e, 0x74, 0x73, 0x2a, 0xe4, 0x02, 0x0a, 0x07, 0x58, 0x4c, 0x43, 0x48, 0x46, 0x61, 0x6e, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f, 0x50, 0x49,
	0x4e, 0x47, 0x48, 0x55, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48,
	0x5f, 0x58, 0x49, 0x41, 0x59, 0x55, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x5f, 0x58, 0x4c,
	0x43, 0x48, 0x5f, 0x47, 0x55, 0x41, 0x46, 0x45, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f, 0x42, 0x41, 0x4f, 0x59, 0x55, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f, 0x44, 0x55, 0x49, 0x44, 0x55, 0x49, 0x48,
	0x55, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f, 0x51, 0x49,
	0x4e, 0x47, 0x59, 0x49, 0x53, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x5f, 0x58, 0x4c,
	0x43, 0x48, 0x5f, 0x44, 0x41, 0x49, 0x59, 0x41, 0x4f, 0x4a, 0x49, 0x55, 0x10, 0x07, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f, 0x51, 0x49, 0x44, 0x55, 0x49, 0x10, 0x08,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f, 0x51, 0x49, 0x4e, 0x47, 0x44,
	0x55, 0x49, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f, 0x4a,
	0x49, 0x41, 0x4e, 0x47, 0x44, 0x55, 0x49, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x5f, 0x58,
	0x4c, 0x43, 0x48, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x51, 0x49, 0x44, 0x55, 0x49, 0x10, 0x0b, 0x12,
	0x14, 0x0a, 0x10, 0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f, 0x51, 0x49, 0x4e, 0x47, 0x51, 0x49,
	0x44, 0x55, 0x49, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f,
	0x51, 0x49, 0x4e, 0x47, 0x59, 0x41, 0x4f, 0x4a, 0x49, 0x55, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d,
	0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f, 0x54, 0x49, 0x41, 0x4e, 0x48, 0x55, 0x10, 0x0e, 0x12,
	0x0f, 0x0a, 0x0b, 0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f, 0x44, 0x49, 0x48, 0x55, 0x10, 0x0f,
	0x12, 0x18, 0x0a, 0x14, 0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f, 0x51, 0x49, 0x4e, 0x47, 0x4c,
	0x4f, 0x4e, 0x47, 0x51, 0x49, 0x44, 0x55, 0x49, 0x10, 0x10, 0x2a, 0x6c, 0x0a, 0x08, 0x58, 0x4c,
	0x43, 0x48, 0x4a, 0x46, 0x61, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x46, 0x5f, 0x58, 0x4c, 0x43,
	0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4a,
	0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f, 0x47, 0x41, 0x4e, 0x47, 0x53, 0x48, 0x41, 0x4e, 0x47,
	0x48, 0x55, 0x41, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48,
	0x5f, 0x47, 0x41, 0x4e, 0x47, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x50, 0x41, 0x4f, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x4a, 0x46, 0x5f, 0x58, 0x4c, 0x43, 0x48, 0x5f, 0x48, 0x41, 0x49, 0x44, 0x49,
	0x4c, 0x41, 0x4f, 0x59, 0x55, 0x45, 0x10, 0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mahjongXLCH_proto_rawDescOnce sync.Once
	file_mahjongXLCH_proto_rawDescData = file_mahjongXLCH_proto_rawDesc
)

func file_mahjongXLCH_proto_rawDescGZIP() []byte {
	file_mahjongXLCH_proto_rawDescOnce.Do(func() {
		file_mahjongXLCH_proto_rawDescData = protoimpl.X.CompressGZIP(file_mahjongXLCH_proto_rawDescData)
	})
	return file_mahjongXLCH_proto_rawDescData
}

var file_mahjongXLCH_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mahjongXLCH_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_mahjongXLCH_proto_goTypes = []interface{}{
	(XLCHFan)(0),                              // 0: go.XLCHFan
	(XLCHJFan)(0),                             // 1: go.XLCHJFan
	(*MahjongXLCHKeZi)(nil),                   // 2: go.MahjongXLCHKeZi
	(*MahjongXLCHHint)(nil),                   // 3: go.MahjongXLCHHint
	(*MahjongXLCHSettle)(nil),                 // 4: go.MahjongXLCHSettle
	(*MahjongXLCHPlayer)(nil),                 // 5: go.MahjongXLCHPlayer
	(*EnterGameMJXLCHResp)(nil),               // 6: go.EnterGameMJXLCHResp
	(*MahjongXLCHSceneResp)(nil),              // 7: go.MahjongXLCHSceneResp
	(*MahjongXLCHStateFreeResp)(nil),          // 8: go.MahjongXLCHStateFreeResp
	(*MahjongXLCHDecideResp)(nil),             // 9: go.MahjongXLCHDecideResp
	(*MahjongXLCHSitDirectResp)(nil),          // 10: go.MahjongXLCHSitDirectResp
	(*MahjongXLCHStateRollDiceResp)(nil),      // 11: go.MahjongXLCHStateRollDiceResp
	(*MahjongXLCHStateStartResp)(nil),         // 12: go.MahjongXLCHStateStartResp
	(*MahjongXLCHStateExchangeThreeResp)(nil), // 13: go.MahjongXLCHStateExchangeThreeResp
	(*MahjongXLCHStateDingQueResp)(nil),       // 14: go.MahjongXLCHStateDingQueResp
	(*MahjongXLCHStatePlayingResp)(nil),       // 15: go.MahjongXLCHStatePlayingResp
	(*MahjongXLCHStateWaitOperateResp)(nil),   // 16: go.MahjongXLCHStateWaitOperateResp
	(*MahjongXLCHStateOpenResp)(nil),          // 17: go.MahjongXLCHStateOpenResp
	(*MahjongXLCHStateOverResp)(nil),          // 18: go.MahjongXLCHStateOverResp
	(*MahjongXLCHStateTingResp)(nil),          // 19: go.MahjongXLCHStateTingResp
	(*MahjongXLCHStateHuaZhuResp)(nil),        // 20: go.MahjongXLCHStateHuaZhuResp
	(*MahjongXLCHDealResp)(nil),               // 21: go.MahjongXLCHDealResp
	(*MahjongXLCHReadyReq)(nil),               // 22: go.MahjongXLCHReadyReq
	(*MahjongXLCHReadyResp)(nil),              // 23: go.MahjongXLCHReadyResp
	(*MahjongXLCHRollReq)(nil),                // 24: go.MahjongXLCHRollReq
	(*MahjongXLCHRollResp)(nil),               // 25: go.MahjongXLCHRollResp
	(*MahjongXLCHExchangeReq)(nil),            // 26: go.MahjongXLCHExchangeReq
	(*MahjongXLCHExchangeResp)(nil),           // 27: go.MahjongXLCHExchangeResp
	(*MahjongXLCHQueMenReq)(nil),              // 28: go.MahjongXLCHQueMenReq
	(*MahjongXLCHQueMenResp)(nil),             // 29: go.MahjongXLCHQueMenResp
	(*MahjongXLCHOutCardReq)(nil),             // 30: go.MahjongXLCHOutCardReq
	(*MahjongXLCHOutCardResp)(nil),            // 31: go.MahjongXLCHOutCardResp
	(*MahjongXLCHOperateReq)(nil),             // 32: go.MahjongXLCHOperateReq
	(*MahjongXLCHOperateResp)(nil),            // 33: go.MahjongXLCHOperateResp
	(*MahjongXLCHHintResp)(nil),               // 34: go.MahjongXLCHHintResp
	(MJOperate)(0),                            // 35: go.MJOperate
	(*PlayerInfo)(nil),                        // 36: go.PlayerInfo
	(Direct)(0),                               // 37: go.Direct
	(*TimeInfo)(nil),                          // 38: go.TimeInfo
}
var file_mahjongXLCH_proto_depIdxs = []int32{
	35, // 0: go.MahjongXLCHKeZi.Code:type_name -> go.MJOperate
	35, // 1: go.MahjongXLCHHint.Code:type_name -> go.MJOperate
	0,  // 2: go.MahjongXLCHSettle.Fan:type_name -> go.XLCHFan
	1,  // 3: go.MahjongXLCHSettle.JFan:type_name -> go.XLCHJFan
	36, // 4: go.MahjongXLCHPlayer.MyInfo:type_name -> go.PlayerInfo
	2,  // 5: go.MahjongXLCHPlayer.KeZiCards:type_name -> go.MahjongXLCHKeZi
	4,  // 6: go.MahjongXLCHPlayer.Settles:type_name -> go.MahjongXLCHSettle
	37, // 7: go.MahjongXLCHPlayer.SitDirect:type_name -> go.Direct
	3,  // 8: go.MahjongXLCHPlayer.OpHints:type_name -> go.MahjongXLCHHint
	5,  // 9: go.EnterGameMJXLCHResp.Player:type_name -> go.MahjongXLCHPlayer
	5,  // 10: go.MahjongXLCHSceneResp.AllPlayers:type_name -> go.MahjongXLCHPlayer
	38, // 11: go.MahjongXLCHStateFreeResp.Times:type_name -> go.TimeInfo
	37, // 12: go.MahjongXLCHSitDirectResp.SitDirect:type_name -> go.Direct
	38, // 13: go.MahjongXLCHStateRollDiceResp.Times:type_name -> go.TimeInfo
	38, // 14: go.MahjongXLCHStateStartResp.Times:type_name -> go.TimeInfo
	38, // 15: go.MahjongXLCHStateExchangeThreeResp.Times:type_name -> go.TimeInfo
	38, // 16: go.MahjongXLCHStateDingQueResp.Times:type_name -> go.TimeInfo
	38, // 17: go.MahjongXLCHStatePlayingResp.Times:type_name -> go.TimeInfo
	38, // 18: go.MahjongXLCHStateWaitOperateResp.Times:type_name -> go.TimeInfo
	38, // 19: go.MahjongXLCHStateOpenResp.Times:type_name -> go.TimeInfo
	5,  // 20: go.MahjongXLCHStateOpenResp.AllPlayers:type_name -> go.MahjongXLCHPlayer
	38, // 21: go.MahjongXLCHStateOverResp.Times:type_name -> go.TimeInfo
	5,  // 22: go.MahjongXLCHStateOverResp.AllPlayers:type_name -> go.MahjongXLCHPlayer
	38, // 23: go.MahjongXLCHStateTingResp.Times:type_name -> go.TimeInfo
	38, // 24: go.MahjongXLCHStateHuaZhuResp.Times:type_name -> go.TimeInfo
	35, // 25: go.MahjongXLCHOperateReq.Code:type_name -> go.MJOperate
	35, // 26: go.MahjongXLCHOperateResp.Code:type_name -> go.MJOperate
	3,  // 27: go.MahjongXLCHHintResp.Hints:type_name -> go.MahjongXLCHHint
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_mahjongXLCH_proto_init() }
func file_mahjongXLCH_proto_init() {
	if File_mahjongXLCH_proto != nil {
		return
	}
	file_gamecomm_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mahjongXLCH_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHKeZi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHSettle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterGameMJXLCHResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHSceneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHStateFreeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHDecideResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHSitDirectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHStateRollDiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHStateStartResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHStateExchangeThreeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHStateDingQueResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHStatePlayingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHStateWaitOperateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHStateOpenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHStateOverResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHStateTingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHStateHuaZhuResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHDealResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHReadyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHReadyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHRollReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHRollResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHExchangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHExchangeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHQueMenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHQueMenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHOutCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHOutCardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHOperateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHOperateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXLCH_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXLCHHintResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mahjongXLCH_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mahjongXLCH_proto_goTypes,
		DependencyIndexes: file_mahjongXLCH_proto_depIdxs,
		EnumInfos:         file_mahjongXLCH_proto_enumTypes,
		MessageInfos:      file_mahjongXLCH_proto_msgTypes,
	}.Build()
	File_mahjongXLCH_proto = out.File
	file_mahjongXLCH_proto_rawDesc = nil
	file_mahjongXLCH_proto_goTypes = nil
	file_mahjongXLCH_proto_depIdxs = nil
}
