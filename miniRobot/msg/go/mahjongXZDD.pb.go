// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: mahjongXZDD.proto

package _go

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//    　基本番: (注意以下番型均不重复计算，只按最大番算。)
//    　　一番（x1）：
//    　　平胡（基本胡），一番，四坎牌加一对将。如23445677筒345789条。
//    　　两番（x2）：
//    　　对对胡（大对子）， 玩家手牌除了一对对牌以外，剩下的都是三张一对的，一共四对。如111222444万33399筒。
//    　　三番（x4）：
//    　　清一色，玩家胡牌的手牌全部都是一门花色。如11333222456999条。
//    　　带幺九，玩家手牌中，全部是用1的连牌或者9的连牌组成的牌。如111222333万78999筒。
//    　　七对，玩家的手牌全部是两张一对的，没有碰过和杠过，如2244552299万1199筒。
//    　　四番（x8）
//    　　清对，四番，玩家手上的牌是清一色的对对胡。如99887755221166筒。
//    　　将对，玩家手上的牌是带二、五、八的对对胡。如222555888条88855万。
//    　　五番（x16）
//    　　龙七对，玩家手牌为暗七对牌型，没有碰过或者杠过，并且有四张牌是一样的，叫龙七对。不再计七对，同时减1根。如
//    　　11222244筒557799万
//    　　清七对，玩家手上的牌是清一色的七对。如11334466778899条。
//    　　清幺九，清一色的幺九，如11123777888999铜。
//    　　六番（x32）
//    　　天胡，打牌的过程中，庄家在第一次模完牌后，就胡牌，叫天胡。
//    　　地胡，在打牌过程中，非庄家在第一次摸完牌后就可以下叫，第一轮摸牌后就胡牌，叫地胡。
//    　　青龙七对，玩家手牌是清一色的龙七对，叫清龙七对，如11224444557799万。算番时减 1根。
//    　　另加番：
//    　　杠上花，1番，杠后自模胡牌（杠了之后补牌而胡） 。
//    　　杠上炮，1番，玩家在杠牌时，先杠一张牌，再打掉一张牌，而打出的这张牌正好时其他玩家胡牌所需要的叫牌时，这种情况叫杠上炮。即玩家杠了后补牌，打出，然后给其他玩家胡了。
//    　　根，1番，四张同样的牌不作杠算1根，胡牌时1根加1番。
//番种
type XZDDFan int32

const (
	XZDDFan_F_XZDD_INVALID XZDDFan = 0 //无效番种
	//一番（x1）
	XZDDFan_F_XZDD_PINGHU  XZDDFan = 1 //平胡
	XZDDFan_F_XZDD_XIAYU   XZDDFan = 2 //下雨 (杠)
	XZDDFan_F_XZDD_GUAFENG XZDDFan = 3 //刮风(明杠)
	XZDDFan_F_XZDD_BAOYU   XZDDFan = 4 //下暴雨(暗杠)
	//两番（x2）
	XZDDFan_F_XZDD_DUIDUIHU XZDDFan = 5 //对对胡
	//三番（x4）
	XZDDFan_F_XZDD_QINGYISE  XZDDFan = 6 //清一色
	XZDDFan_F_XZDD_DAIYAOJIU XZDDFan = 7 //带幺九
	XZDDFan_F_XZDD_QIDUI     XZDDFan = 8 //七对
	//四番（x8）
	XZDDFan_F_XZDD_QINGDUI  XZDDFan = 9  //清对
	XZDDFan_F_XZDD_JIANGDUI XZDDFan = 10 //将对【注：由于有些地区无此胡法 暂不纳入算番】
	//五番（x16）
	XZDDFan_F_XZDD_LONGQIDUI  XZDDFan = 11 //龙七对
	XZDDFan_F_XZDD_QINGQIDUI  XZDDFan = 12 //清七对
	XZDDFan_F_XZDD_QINGYAOJIU XZDDFan = 13 //清幺九
	// 六番（x32）
	XZDDFan_F_XZDD_TIANHU        XZDDFan = 14 //天胡
	XZDDFan_F_XZDD_DIHU          XZDDFan = 15 //地胡
	XZDDFan_F_XZDD_QINGLONGQIDUI XZDDFan = 16 //清龙七对
)

// Enum value maps for XZDDFan.
var (
	XZDDFan_name = map[int32]string{
		0:  "F_XZDD_INVALID",
		1:  "F_XZDD_PINGHU",
		2:  "F_XZDD_XIAYU",
		3:  "F_XZDD_GUAFENG",
		4:  "F_XZDD_BAOYU",
		5:  "F_XZDD_DUIDUIHU",
		6:  "F_XZDD_QINGYISE",
		7:  "F_XZDD_DAIYAOJIU",
		8:  "F_XZDD_QIDUI",
		9:  "F_XZDD_QINGDUI",
		10: "F_XZDD_JIANGDUI",
		11: "F_XZDD_LONGQIDUI",
		12: "F_XZDD_QINGQIDUI",
		13: "F_XZDD_QINGYAOJIU",
		14: "F_XZDD_TIANHU",
		15: "F_XZDD_DIHU",
		16: "F_XZDD_QINGLONGQIDUI",
	}
	XZDDFan_value = map[string]int32{
		"F_XZDD_INVALID":       0,
		"F_XZDD_PINGHU":        1,
		"F_XZDD_XIAYU":         2,
		"F_XZDD_GUAFENG":       3,
		"F_XZDD_BAOYU":         4,
		"F_XZDD_DUIDUIHU":      5,
		"F_XZDD_QINGYISE":      6,
		"F_XZDD_DAIYAOJIU":     7,
		"F_XZDD_QIDUI":         8,
		"F_XZDD_QINGDUI":       9,
		"F_XZDD_JIANGDUI":      10,
		"F_XZDD_LONGQIDUI":     11,
		"F_XZDD_QINGQIDUI":     12,
		"F_XZDD_QINGYAOJIU":    13,
		"F_XZDD_TIANHU":        14,
		"F_XZDD_DIHU":          15,
		"F_XZDD_QINGLONGQIDUI": 16,
	}
)

func (x XZDDFan) Enum() *XZDDFan {
	p := new(XZDDFan)
	*p = x
	return p
}

func (x XZDDFan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XZDDFan) Descriptor() protoreflect.EnumDescriptor {
	return file_mahjongXZDD_proto_enumTypes[0].Descriptor()
}

func (XZDDFan) Type() protoreflect.EnumType {
	return &file_mahjongXZDD_proto_enumTypes[0]
}

func (x XZDDFan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XZDDFan.Descriptor instead.
func (XZDDFan) EnumDescriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{0}
}

//加番
type XZDDJFan int32

const (
	XZDDJFan_JF_XZDD_INVALID XZDDJFan = 0 //无效加番
	//加番
	XZDDJFan_JF_XZDD_GANGSHANGHUA XZDDJFan = 1 //杠上花
	XZDDJFan_JF_XZDD_GANGSHANGPAO XZDDJFan = 2 //杠上炮
	XZDDJFan_JF_XZDD_HAIDILAOYUE  XZDDJFan = 3 //海底捞月
)

// Enum value maps for XZDDJFan.
var (
	XZDDJFan_name = map[int32]string{
		0: "JF_XZDD_INVALID",
		1: "JF_XZDD_GANGSHANGHUA",
		2: "JF_XZDD_GANGSHANGPAO",
		3: "JF_XZDD_HAIDILAOYUE",
	}
	XZDDJFan_value = map[string]int32{
		"JF_XZDD_INVALID":      0,
		"JF_XZDD_GANGSHANGHUA": 1,
		"JF_XZDD_GANGSHANGPAO": 2,
		"JF_XZDD_HAIDILAOYUE":  3,
	}
)

func (x XZDDJFan) Enum() *XZDDJFan {
	p := new(XZDDJFan)
	*p = x
	return p
}

func (x XZDDJFan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XZDDJFan) Descriptor() protoreflect.EnumDescriptor {
	return file_mahjongXZDD_proto_enumTypes[1].Descriptor()
}

func (XZDDJFan) Type() protoreflect.EnumType {
	return &file_mahjongXZDD_proto_enumTypes[1]
}

func (x XZDDJFan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XZDDJFan.Descriptor instead.
func (XZDDJFan) EnumDescriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{1}
}

// kindID 3009
////////////////////血战到底介绍/////////////////////////////
//    血战到底：一家胡了并不结束这局，而是未胡的玩家继续打，直到有三家都胡或者余下的玩家摸完牌。这样先胡的不一定获利最多，点炮的也能翻身，提高了博弈性和趣味性。牌局结束，一并结算。
//    刮风下雨：杠在结算时算钱。
//    庄家：第一局随意，以后每一局由上一局第一个胡牌者当庄，若是一炮双响或一炮三响，由放炮者当庄。
//    甩色子：由庄家掷两枚骰子以确定端牌的起始位置。12换右 34换对家 56换左
//    跳牌：庄家摸第14张牌时需隔一沓牌摸上面一张，此谓跳牌。
//    定张：在一局的开始定下不要哪门牌，以后不能改。一般将一张此颜色的牌面朝下摆放，第一轮打出。
//    缺（天缺）：一局开始摸上牌后就只有两门牌甚至一门牌，此时报缺。
//    搭子（坎）：三张数字连续的牌或三张相同的牌称为一个搭子或一坎牌。
//    堂子：牌桌上打出的牌堆
//    将：胡牌时的一对牌。
//    下叫：听牌。缺一门，四个搭子加一对将即可胡牌。
//    死叫：下的叫实际上不能胡（所有能胡的牌都已经现出）
//    根（音gēn，通常儿化为gēr，某些地方念成guī）：杠，或者四张相同未成杠（四归一）。
//    张子：指某张特定的牌。如：二条这个张子怎么能松哦？
//    绝张（金张）：四张牌已经现了三张，最后一张称为绝张。
//    自抠（自逮，自摸）：胡自己摸上的牌。
//    放炮（点炮）：打出的牌被他人胡了。
//    格：指牌型的大小。
//    满格（极品）：实际中基础牌型一般8倍封顶，为满格。
//    查叫：一局结束时，有两家或以上未胡牌，此时查叫。无叫的给有叫的赔叫（赔大或赔小需自行商定，死叫算不算叫需自行商定）。若无叫，杠不计算。
//    花猫（花猪）：查叫时手中还有三色牌。花猫给所有未胡且非花猫的人赔满格。
//    ----牌值由万 筒 条组成---
/////////////////////番型解义(请看文件末部)///////////////////
//刻子
type MahjongXZDDKeZi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []int32   `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`
	Code  MJOperate `protobuf:"varint,2,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"`
	Gen   int32     `protobuf:"varint,3,opt,name=Gen,proto3" json:"Gen,omitempty"`     // 带根
	ByUid uint64    `protobuf:"varint,4,opt,name=ByUid,proto3" json:"ByUid,omitempty"` // 由谁提供
}

func (x *MahjongXZDDKeZi) Reset() {
	*x = MahjongXZDDKeZi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDKeZi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDKeZi) ProtoMessage() {}

func (x *MahjongXZDDKeZi) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDKeZi.ProtoReflect.Descriptor instead.
func (*MahjongXZDDKeZi) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{0}
}

func (x *MahjongXZDDKeZi) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MahjongXZDDKeZi) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongXZDDKeZi) GetGen() int32 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *MahjongXZDDKeZi) GetByUid() uint64 {
	if x != nil {
		return x.ByUid
	}
	return 0
}

//提示
type MahjongXZDDHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  MJOperate `protobuf:"varint,1,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码
	Cards []int32   `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 听哪几张牌| 胡牌和自摸皆为一张
	ByUid uint64    `protobuf:"varint,3,opt,name=ByUid,proto3" json:"ByUid,omitempty"`                 // 由谁提供
}

func (x *MahjongXZDDHint) Reset() {
	*x = MahjongXZDDHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDHint) ProtoMessage() {}

func (x *MahjongXZDDHint) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDHint.ProtoReflect.Descriptor instead.
func (*MahjongXZDDHint) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{1}
}

func (x *MahjongXZDDHint) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongXZDDHint) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MahjongXZDDHint) GetByUid() uint64 {
	if x != nil {
		return x.ByUid
	}
	return 0
}

//结算
type MahjongXZDDSettle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fan       XZDDFan  `protobuf:"varint,1,opt,name=Fan,proto3,enum=go.XZDDFan" json:"Fan,omitempty"`    // 番型
	JFan      XZDDJFan `protobuf:"varint,2,opt,name=JFan,proto3,enum=go.XZDDJFan" json:"JFan,omitempty"` // 加番
	Gen       int32    `protobuf:"varint,3,opt,name=Gen,proto3" json:"Gen,omitempty"`                    // 带根数目
	GainScore int64    `protobuf:"varint,4,opt,name=GainScore,proto3" json:"GainScore,omitempty"`        // 输赢分值
	WinID     uint64   `protobuf:"varint,5,opt,name=WinID,proto3" json:"WinID,omitempty"`                // 赢家ID
}

func (x *MahjongXZDDSettle) Reset() {
	*x = MahjongXZDDSettle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDSettle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDSettle) ProtoMessage() {}

func (x *MahjongXZDDSettle) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDSettle.ProtoReflect.Descriptor instead.
func (*MahjongXZDDSettle) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{2}
}

func (x *MahjongXZDDSettle) GetFan() XZDDFan {
	if x != nil {
		return x.Fan
	}
	return XZDDFan_F_XZDD_INVALID
}

func (x *MahjongXZDDSettle) GetJFan() XZDDJFan {
	if x != nil {
		return x.JFan
	}
	return XZDDJFan_JF_XZDD_INVALID
}

func (x *MahjongXZDDSettle) GetGen() int32 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *MahjongXZDDSettle) GetGainScore() int64 {
	if x != nil {
		return x.GainScore
	}
	return 0
}

func (x *MahjongXZDDSettle) GetWinID() uint64 {
	if x != nil {
		return x.WinID
	}
	return 0
}

//麻将玩家信息
type MahjongXZDDPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyInfo     *PlayerInfo          `protobuf:"bytes,1,opt,name=MyInfo,proto3" json:"MyInfo,omitempty"`                        //
	HandCards  []int32              `protobuf:"varint,2,rep,packed,name=HandCards,proto3" json:"HandCards,omitempty"`          //手牌
	KeZiCards  []*MahjongXZDDKeZi   `protobuf:"bytes,3,rep,name=KeZiCards,proto3" json:"KeZiCards,omitempty"`                  // 桌牌:明在桌面上的牌,即碰、杠、胡的牌
	TableCards []int32              `protobuf:"varint,4,rep,packed,name=TableCards,proto3" json:"TableCards,omitempty"`        // 玩家的桌面牌值
	IsHu       bool                 `protobuf:"varint,5,opt,name=IsHu,proto3" json:"IsHu,omitempty"`                           // 是否胡牌
	IsHuaZhu   bool                 `protobuf:"varint,6,opt,name=IsHuaZhu,proto3" json:"IsHuaZhu,omitempty"`                   // 是否花猪 查花猪
	IsTing     bool                 `protobuf:"varint,7,opt,name=IsTing,proto3" json:"IsTing,omitempty"`                       // 是否听牌 查叫
	QueMen     int32                `protobuf:"varint,8,opt,name=QueMen,proto3" json:"QueMen,omitempty"`                       // 定张 0:无效 1:万 2:筒 3:条
	Settles    []*MahjongXZDDSettle `protobuf:"bytes,9,rep,name=Settles,proto3" json:"Settles,omitempty"`                      // 每次结算记录
	TotalScore int64                `protobuf:"varint,10,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`              // 总积分(当不为系统房时,该分值可以为负分)
	SitDirect  Direct               `protobuf:"varint,11,opt,name=SitDirect,proto3,enum=go.Direct" json:"SitDirect,omitempty"` // 座位方位
	OpHints    []*MahjongXZDDHint   `protobuf:"bytes,12,rep,name=OpHints,proto3" json:"OpHints,omitempty"`                     //玩家可操作(恢复场景)
}

func (x *MahjongXZDDPlayer) Reset() {
	*x = MahjongXZDDPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDPlayer) ProtoMessage() {}

func (x *MahjongXZDDPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDPlayer.ProtoReflect.Descriptor instead.
func (*MahjongXZDDPlayer) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{3}
}

func (x *MahjongXZDDPlayer) GetMyInfo() *PlayerInfo {
	if x != nil {
		return x.MyInfo
	}
	return nil
}

func (x *MahjongXZDDPlayer) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *MahjongXZDDPlayer) GetKeZiCards() []*MahjongXZDDKeZi {
	if x != nil {
		return x.KeZiCards
	}
	return nil
}

func (x *MahjongXZDDPlayer) GetTableCards() []int32 {
	if x != nil {
		return x.TableCards
	}
	return nil
}

func (x *MahjongXZDDPlayer) GetIsHu() bool {
	if x != nil {
		return x.IsHu
	}
	return false
}

func (x *MahjongXZDDPlayer) GetIsHuaZhu() bool {
	if x != nil {
		return x.IsHuaZhu
	}
	return false
}

func (x *MahjongXZDDPlayer) GetIsTing() bool {
	if x != nil {
		return x.IsTing
	}
	return false
}

func (x *MahjongXZDDPlayer) GetQueMen() int32 {
	if x != nil {
		return x.QueMen
	}
	return 0
}

func (x *MahjongXZDDPlayer) GetSettles() []*MahjongXZDDSettle {
	if x != nil {
		return x.Settles
	}
	return nil
}

func (x *MahjongXZDDPlayer) GetTotalScore() int64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *MahjongXZDDPlayer) GetSitDirect() Direct {
	if x != nil {
		return x.SitDirect
	}
	return Direct_Centre
}

func (x *MahjongXZDDPlayer) GetOpHints() []*MahjongXZDDHint {
	if x != nil {
		return x.OpHints
	}
	return nil
}

//入场
type EnterGameMJXZDDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID   uint64             `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`     //游戏标识
	ChairNum uint32             `protobuf:"varint,2,opt,name=ChairNum,proto3" json:"ChairNum,omitempty"` //椅子编号(不满足req的此项时,将由系统分配,并返回提示)
	Player   *MahjongXZDDPlayer `protobuf:"bytes,3,opt,name=Player,proto3" json:"Player,omitempty"`
}

func (x *EnterGameMJXZDDResp) Reset() {
	*x = EnterGameMJXZDDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterGameMJXZDDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterGameMJXZDDResp) ProtoMessage() {}

func (x *EnterGameMJXZDDResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterGameMJXZDDResp.ProtoReflect.Descriptor instead.
func (*EnterGameMJXZDDResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{4}
}

func (x *EnterGameMJXZDDResp) GetGameID() uint64 {
	if x != nil {
		return x.GameID
	}
	return 0
}

func (x *EnterGameMJXZDDResp) GetChairNum() uint32 {
	if x != nil {
		return x.ChairNum
	}
	return 0
}

func (x *EnterGameMJXZDDResp) GetPlayer() *MahjongXZDDPlayer {
	if x != nil {
		return x.Player
	}
	return nil
}

//场景
type MahjongXZDDSceneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp   int64                `protobuf:"varint,1,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`     // 时间戳
	RunCount    int32                `protobuf:"varint,2,opt,name=RunCount,proto3" json:"RunCount,omitempty"`       // 当前局数
	RemainCount int32                `protobuf:"varint,3,opt,name=RemainCount,proto3" json:"RemainCount,omitempty"` // 剩余张数
	BankerID    uint64               `protobuf:"varint,4,opt,name=BankerID,proto3" json:"BankerID,omitempty"`       // 庄家ID
	CurrentID   uint64               `protobuf:"varint,5,opt,name=CurrentID,proto3" json:"CurrentID,omitempty"`     // 当前玩家ID
	Inning      string               `protobuf:"bytes,6,opt,name=Inning,proto3" json:"Inning,omitempty"`            // 牌局号
	HuCard      int32                `protobuf:"varint,7,opt,name=HuCard,proto3" json:"HuCard,omitempty"`           // 胡牌,或自摸时的摸起的最后一张
	StartPos    int32                `protobuf:"varint,8,opt,name=StartPos,proto3" json:"StartPos,omitempty"`       // 抓牌起始位置(即保留不抓取的牌墙)
	AllPlayers  []*MahjongXZDDPlayer `protobuf:"bytes,9,rep,name=AllPlayers,proto3" json:"AllPlayers,omitempty"`    //玩家列表
}

func (x *MahjongXZDDSceneResp) Reset() {
	*x = MahjongXZDDSceneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDSceneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDSceneResp) ProtoMessage() {}

func (x *MahjongXZDDSceneResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDSceneResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDSceneResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{5}
}

func (x *MahjongXZDDSceneResp) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *MahjongXZDDSceneResp) GetRunCount() int32 {
	if x != nil {
		return x.RunCount
	}
	return 0
}

func (x *MahjongXZDDSceneResp) GetRemainCount() int32 {
	if x != nil {
		return x.RemainCount
	}
	return 0
}

func (x *MahjongXZDDSceneResp) GetBankerID() uint64 {
	if x != nil {
		return x.BankerID
	}
	return 0
}

func (x *MahjongXZDDSceneResp) GetCurrentID() uint64 {
	if x != nil {
		return x.CurrentID
	}
	return 0
}

func (x *MahjongXZDDSceneResp) GetInning() string {
	if x != nil {
		return x.Inning
	}
	return ""
}

func (x *MahjongXZDDSceneResp) GetHuCard() int32 {
	if x != nil {
		return x.HuCard
	}
	return 0
}

func (x *MahjongXZDDSceneResp) GetStartPos() int32 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

func (x *MahjongXZDDSceneResp) GetAllPlayers() []*MahjongXZDDPlayer {
	if x != nil {
		return x.AllPlayers
	}
	return nil
}

//状态
// 服务端推送
//(空闲 - Free)
type MahjongXZDDStateFreeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times  *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	Inning string    `protobuf:"bytes,2,opt,name=Inning,proto3" json:"Inning,omitempty"` // 牌局号
}

func (x *MahjongXZDDStateFreeResp) Reset() {
	*x = MahjongXZDDStateFreeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDStateFreeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDStateFreeResp) ProtoMessage() {}

func (x *MahjongXZDDStateFreeResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDStateFreeResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDStateFreeResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{6}
}

func (x *MahjongXZDDStateFreeResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXZDDStateFreeResp) GetInning() string {
	if x != nil {
		return x.Inning
	}
	return ""
}

//定庄 - Decide系统 定庄 定座次
type MahjongXZDDDecideResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankerID uint64 `protobuf:"varint,1,opt,name=BankerID,proto3" json:"BankerID,omitempty"` // 首局默认座位东方的为庄家
}

func (x *MahjongXZDDDecideResp) Reset() {
	*x = MahjongXZDDDecideResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDDecideResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDDecideResp) ProtoMessage() {}

func (x *MahjongXZDDDecideResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDDecideResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDDecideResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{7}
}

func (x *MahjongXZDDDecideResp) GetBankerID() uint64 {
	if x != nil {
		return x.BankerID
	}
	return 0
}

type MahjongXZDDSitDirectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`                      //
	SitDirect Direct `protobuf:"varint,2,opt,name=SitDirect,proto3,enum=go.Direct" json:"SitDirect,omitempty"` // 玩家方位
}

func (x *MahjongXZDDSitDirectResp) Reset() {
	*x = MahjongXZDDSitDirectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDSitDirectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDSitDirectResp) ProtoMessage() {}

func (x *MahjongXZDDSitDirectResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDSitDirectResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDSitDirectResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{8}
}

func (x *MahjongXZDDSitDirectResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXZDDSitDirectResp) GetSitDirect() Direct {
	if x != nil {
		return x.SitDirect
	}
	return Direct_Centre
}

//开始掷骰子 - RollDice 注:决定牌堆的起始位置
type MahjongXZDDStateRollDiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongXZDDStateRollDiceResp) Reset() {
	*x = MahjongXZDDStateRollDiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDStateRollDiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDStateRollDiceResp) ProtoMessage() {}

func (x *MahjongXZDDStateRollDiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDStateRollDiceResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDStateRollDiceResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{9}
}

func (x *MahjongXZDDStateRollDiceResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//发牌(开始游戏) - Start
type MahjongXZDDStateStartResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times    *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	StartPos int32     `protobuf:"varint,2,opt,name=StartPos,proto3" json:"StartPos,omitempty"` //抓牌起始位置(即保留不抓取的牌墙)
}

func (x *MahjongXZDDStateStartResp) Reset() {
	*x = MahjongXZDDStateStartResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDStateStartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDStateStartResp) ProtoMessage() {}

func (x *MahjongXZDDStateStartResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDStateStartResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDStateStartResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{10}
}

func (x *MahjongXZDDStateStartResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXZDDStateStartResp) GetStartPos() int32 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

//换三张 骰子之和取6余数+1  换右:12  换对家:34  换左56
type MahjongXZDDStateExchangeThreeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongXZDDStateExchangeThreeResp) Reset() {
	*x = MahjongXZDDStateExchangeThreeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDStateExchangeThreeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDStateExchangeThreeResp) ProtoMessage() {}

func (x *MahjongXZDDStateExchangeThreeResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDStateExchangeThreeResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDStateExchangeThreeResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{11}
}

func (x *MahjongXZDDStateExchangeThreeResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//定缺门
type MahjongXZDDStateDingQueResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times      *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	MyCards    []int32   `protobuf:"varint,2,rep,packed,name=MyCards,proto3" json:"MyCards,omitempty"`       // 提供给别人
	OtherCards []int32   `protobuf:"varint,3,rep,packed,name=OtherCards,proto3" json:"OtherCards,omitempty"` // 从别人中获取的
}

func (x *MahjongXZDDStateDingQueResp) Reset() {
	*x = MahjongXZDDStateDingQueResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDStateDingQueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDStateDingQueResp) ProtoMessage() {}

func (x *MahjongXZDDStateDingQueResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDStateDingQueResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDStateDingQueResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{12}
}

func (x *MahjongXZDDStateDingQueResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXZDDStateDingQueResp) GetMyCards() []int32 {
	if x != nil {
		return x.MyCards
	}
	return nil
}

func (x *MahjongXZDDStateDingQueResp) GetOtherCards() []int32 {
	if x != nil {
		return x.OtherCards
	}
	return nil
}

//(游戏中) - Playing
type MahjongXZDDStatePlayingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times  *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	UserID uint64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"` // 轮到谁
	Card   int32     `protobuf:"varint,3,opt,name=Card,proto3" json:"Card,omitempty"`     // 只有UserID的玩家有牌值
}

func (x *MahjongXZDDStatePlayingResp) Reset() {
	*x = MahjongXZDDStatePlayingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDStatePlayingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDStatePlayingResp) ProtoMessage() {}

func (x *MahjongXZDDStatePlayingResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDStatePlayingResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDStatePlayingResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{13}
}

func (x *MahjongXZDDStatePlayingResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXZDDStatePlayingResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXZDDStatePlayingResp) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

//等待操作(仅对有提示的玩家提供)
type MahjongXZDDStateWaitOperateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongXZDDStateWaitOperateResp) Reset() {
	*x = MahjongXZDDStateWaitOperateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDStateWaitOperateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDStateWaitOperateResp) ProtoMessage() {}

func (x *MahjongXZDDStateWaitOperateResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDStateWaitOperateResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDStateWaitOperateResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{14}
}

func (x *MahjongXZDDStateWaitOperateResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//(开奖) - Opening
type MahjongXZDDStateOpenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times     *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	OpCard    int32     `protobuf:"varint,2,opt,name=OpCard,proto3" json:"OpCard,omitempty"`       //下雨 胡牌,或自摸时的摸起的最后一张
	Fan       int32     `protobuf:"varint,3,opt,name=Fan,proto3" json:"Fan,omitempty"`             //番型
	GainScore int64     `protobuf:"varint,4,opt,name=GainScore,proto3" json:"GainScore,omitempty"` //收益
	WinnerID  uint64    `protobuf:"varint,5,opt,name=WinnerID,proto3" json:"WinnerID,omitempty"`
}

func (x *MahjongXZDDStateOpenResp) Reset() {
	*x = MahjongXZDDStateOpenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDStateOpenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDStateOpenResp) ProtoMessage() {}

func (x *MahjongXZDDStateOpenResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDStateOpenResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDStateOpenResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{15}
}

func (x *MahjongXZDDStateOpenResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXZDDStateOpenResp) GetOpCard() int32 {
	if x != nil {
		return x.OpCard
	}
	return 0
}

func (x *MahjongXZDDStateOpenResp) GetFan() int32 {
	if x != nil {
		return x.Fan
	}
	return 0
}

func (x *MahjongXZDDStateOpenResp) GetGainScore() int64 {
	if x != nil {
		return x.GainScore
	}
	return 0
}

func (x *MahjongXZDDStateOpenResp) GetWinnerID() uint64 {
	if x != nil {
		return x.WinnerID
	}
	return 0
}

//(结束) - Over
type MahjongXZDDStateOverResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times      *TimeInfo            `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	AllPlayers []*MahjongXZDDPlayer `protobuf:"bytes,2,rep,name=AllPlayers,proto3" json:"AllPlayers,omitempty"` //所有玩家得分 包含是否听 或花猪
}

func (x *MahjongXZDDStateOverResp) Reset() {
	*x = MahjongXZDDStateOverResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDStateOverResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDStateOverResp) ProtoMessage() {}

func (x *MahjongXZDDStateOverResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDStateOverResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDStateOverResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{16}
}

func (x *MahjongXZDDStateOverResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXZDDStateOverResp) GetAllPlayers() []*MahjongXZDDPlayer {
	if x != nil {
		return x.AllPlayers
	}
	return nil
}

//查叫 没有听牌 等待退款
type MahjongXZDDStateTingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times   *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	NoTings []uint64  `protobuf:"varint,2,rep,packed,name=NoTings,proto3" json:"NoTings,omitempty"`
}

func (x *MahjongXZDDStateTingResp) Reset() {
	*x = MahjongXZDDStateTingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDStateTingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDStateTingResp) ProtoMessage() {}

func (x *MahjongXZDDStateTingResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDStateTingResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDStateTingResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{17}
}

func (x *MahjongXZDDStateTingResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXZDDStateTingResp) GetNoTings() []uint64 {
	if x != nil {
		return x.NoTings
	}
	return nil
}

//查花猪 手牌中仍有三种花色 等待结算
type MahjongXZDDStateHuaZhuResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times  *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	HuaZhu []uint64  `protobuf:"varint,2,rep,packed,name=HuaZhu,proto3" json:"HuaZhu,omitempty"`
}

func (x *MahjongXZDDStateHuaZhuResp) Reset() {
	*x = MahjongXZDDStateHuaZhuResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDStateHuaZhuResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDStateHuaZhuResp) ProtoMessage() {}

func (x *MahjongXZDDStateHuaZhuResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDStateHuaZhuResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDStateHuaZhuResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{18}
}

func (x *MahjongXZDDStateHuaZhuResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongXZDDStateHuaZhuResp) GetHuaZhu() []uint64 {
	if x != nil {
		return x.HuaZhu
	}
	return nil
}

//////////////////////////////////////////////
//发牌
type MahjongXZDDDealResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    uint64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`              // 玩家ID
	CurPos    int32   `protobuf:"varint,2,opt,name=CurPos,proto3" json:"CurPos,omitempty"`              // 抓牌起始位置
	HandCards []int32 `protobuf:"varint,3,rep,packed,name=HandCards,proto3" json:"HandCards,omitempty"` // 玩家的手牌(座位上的玩家才有,且只能拿到自己的牌值)
}

func (x *MahjongXZDDDealResp) Reset() {
	*x = MahjongXZDDDealResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDDealResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDDealResp) ProtoMessage() {}

func (x *MahjongXZDDDealResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDDealResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDDealResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{19}
}

func (x *MahjongXZDDDealResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXZDDDealResp) GetCurPos() int32 {
	if x != nil {
		return x.CurPos
	}
	return 0
}

func (x *MahjongXZDDDealResp) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

//////////////////////////////////////////////
//准备
type MahjongXZDDReadyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReady bool `protobuf:"varint,1,opt,name=IsReady,proto3" json:"IsReady,omitempty"` // 玩家准备，可以取消准备
}

func (x *MahjongXZDDReadyReq) Reset() {
	*x = MahjongXZDDReadyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDReadyReq) ProtoMessage() {}

func (x *MahjongXZDDReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDReadyReq.ProtoReflect.Descriptor instead.
func (*MahjongXZDDReadyReq) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{20}
}

func (x *MahjongXZDDReadyReq) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

type MahjongXZDDReadyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IsReady bool   `protobuf:"varint,2,opt,name=IsReady,proto3" json:"IsReady,omitempty"` // 玩家准备，可以取消准备
}

func (x *MahjongXZDDReadyResp) Reset() {
	*x = MahjongXZDDReadyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDReadyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDReadyResp) ProtoMessage() {}

func (x *MahjongXZDDReadyResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDReadyResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDReadyResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{21}
}

func (x *MahjongXZDDReadyResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXZDDReadyResp) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

//扔骰子
type MahjongXZDDRollReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongXZDDRollReq) Reset() {
	*x = MahjongXZDDRollReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDRollReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDRollReq) ProtoMessage() {}

func (x *MahjongXZDDRollReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDRollReq.ProtoReflect.Descriptor instead.
func (*MahjongXZDDRollReq) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{22}
}

type MahjongXZDDRollResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Dice   []byte `protobuf:"bytes,2,opt,name=Dice,proto3" json:"Dice,omitempty"` //骰子决定,起抓牌位置
}

func (x *MahjongXZDDRollResp) Reset() {
	*x = MahjongXZDDRollResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDRollResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDRollResp) ProtoMessage() {}

func (x *MahjongXZDDRollResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDRollResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDRollResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{23}
}

func (x *MahjongXZDDRollResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXZDDRollResp) GetDice() []byte {
	if x != nil {
		return x.Dice
	}
	return nil
}

//请求换三张
type MahjongXZDDExchangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandCards []int32 `protobuf:"varint,1,rep,packed,name=HandCards,proto3" json:"HandCards,omitempty"` // 玩家请求换的三张牌
}

func (x *MahjongXZDDExchangeReq) Reset() {
	*x = MahjongXZDDExchangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDExchangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDExchangeReq) ProtoMessage() {}

func (x *MahjongXZDDExchangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDExchangeReq.ProtoReflect.Descriptor instead.
func (*MahjongXZDDExchangeReq) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{24}
}

func (x *MahjongXZDDExchangeReq) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

type MahjongXZDDExchangeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    uint64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`              // 玩家ID
	HandCards []int32 `protobuf:"varint,2,rep,packed,name=HandCards,proto3" json:"HandCards,omitempty"` // 玩家的手牌(座位上的玩家才有,且只能拿到自己的牌值)
}

func (x *MahjongXZDDExchangeResp) Reset() {
	*x = MahjongXZDDExchangeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDExchangeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDExchangeResp) ProtoMessage() {}

func (x *MahjongXZDDExchangeResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDExchangeResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDExchangeResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{25}
}

func (x *MahjongXZDDExchangeResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXZDDExchangeResp) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

//定缺门
type MahjongXZDDQueMenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueMen int32 `protobuf:"varint,1,opt,name=QueMen,proto3" json:"QueMen,omitempty"` //0:默认 1:万 2:筒 3:条
}

func (x *MahjongXZDDQueMenReq) Reset() {
	*x = MahjongXZDDQueMenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDQueMenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDQueMenReq) ProtoMessage() {}

func (x *MahjongXZDDQueMenReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDQueMenReq.ProtoReflect.Descriptor instead.
func (*MahjongXZDDQueMenReq) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{26}
}

func (x *MahjongXZDDQueMenReq) GetQueMen() int32 {
	if x != nil {
		return x.QueMen
	}
	return 0
}

type MahjongXZDDQueMenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"` // 玩家ID
	QueMen int32  `protobuf:"varint,2,opt,name=QueMen,proto3" json:"QueMen,omitempty"` //0:默认 1:万 2:筒 3:条
}

func (x *MahjongXZDDQueMenResp) Reset() {
	*x = MahjongXZDDQueMenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDQueMenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDQueMenResp) ProtoMessage() {}

func (x *MahjongXZDDQueMenResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDQueMenResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDQueMenResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{27}
}

func (x *MahjongXZDDQueMenResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXZDDQueMenResp) GetQueMen() int32 {
	if x != nil {
		return x.QueMen
	}
	return 0
}

// 玩家打出去的牌
type MahjongXZDDOutCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card int32 `protobuf:"varint,1,opt,name=Card,proto3" json:"Card,omitempty"` //
}

func (x *MahjongXZDDOutCardReq) Reset() {
	*x = MahjongXZDDOutCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDOutCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDOutCardReq) ProtoMessage() {}

func (x *MahjongXZDDOutCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDOutCardReq.ProtoReflect.Descriptor instead.
func (*MahjongXZDDOutCardReq) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{28}
}

func (x *MahjongXZDDOutCardReq) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

type MahjongXZDDOutCardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"` // 玩家ID
	Card   int32  `protobuf:"varint,2,opt,name=Card,proto3" json:"Card,omitempty"`     //
}

func (x *MahjongXZDDOutCardResp) Reset() {
	*x = MahjongXZDDOutCardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDOutCardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDOutCardResp) ProtoMessage() {}

func (x *MahjongXZDDOutCardResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDOutCardResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDOutCardResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{29}
}

func (x *MahjongXZDDOutCardResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXZDDOutCardResp) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

// 操作
type MahjongXZDDOperateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  MJOperate `protobuf:"varint,1,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码 pass表示弃牌
	Cards []int32   `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 碰|杠|胡|自摸 时的手牌
}

func (x *MahjongXZDDOperateReq) Reset() {
	*x = MahjongXZDDOperateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDOperateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDOperateReq) ProtoMessage() {}

func (x *MahjongXZDDOperateReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDOperateReq.ProtoReflect.Descriptor instead.
func (*MahjongXZDDOperateReq) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{30}
}

func (x *MahjongXZDDOperateReq) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongXZDDOperateReq) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

type MahjongXZDDOperateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`               // 玩家ID
	Code   MJOperate `protobuf:"varint,2,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码
	Cards  []int32   `protobuf:"varint,3,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 碰|杠|胡|自摸 时的组合牌
}

func (x *MahjongXZDDOperateResp) Reset() {
	*x = MahjongXZDDOperateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDOperateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDOperateResp) ProtoMessage() {}

func (x *MahjongXZDDOperateResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDOperateResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDOperateResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{31}
}

func (x *MahjongXZDDOperateResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXZDDOperateResp) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongXZDDOperateResp) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 玩家只能收到自己的
type MahjongXZDDHintResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64             `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"` // 玩家ID
	Hints  []*MahjongXZDDHint `protobuf:"bytes,2,rep,name=Hints,proto3" json:"Hints,omitempty"`    //提示 注意:吃牌时,有多种组合 cards仅提供玩家手牌牌值
}

func (x *MahjongXZDDHintResp) Reset() {
	*x = MahjongXZDDHintResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongXZDD_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongXZDDHintResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongXZDDHintResp) ProtoMessage() {}

func (x *MahjongXZDDHintResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongXZDD_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongXZDDHintResp.ProtoReflect.Descriptor instead.
func (*MahjongXZDDHintResp) Descriptor() ([]byte, []int) {
	return file_mahjongXZDD_proto_rawDescGZIP(), []int{32}
}

func (x *MahjongXZDDHintResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongXZDDHintResp) GetHints() []*MahjongXZDDHint {
	if x != nil {
		return x.Hints
	}
	return nil
}

var File_mahjongXZDD_proto protoreflect.FileDescriptor

var file_mahjongXZDD_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x67, 0x6f, 0x1a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x0f, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x4b, 0x65, 0x5a, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x47, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x55, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x42, 0x79, 0x55, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x0f, 0x4d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67,
	0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x55, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x42, 0x79, 0x55, 0x69, 0x64, 0x22, 0x9a, 0x01,
	0x0a, 0x11, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x46, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x2e, 0x58, 0x5a, 0x44, 0x44, 0x46, 0x61, 0x6e, 0x52, 0x03, 0x46,
	0x61, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x4a, 0x46, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x58, 0x5a, 0x44, 0x44, 0x4a, 0x46, 0x61, 0x6e, 0x52, 0x04,
	0x4a, 0x46, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x47, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x69, 0x6e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x61, 0x69, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x57, 0x69, 0x6e, 0x49, 0x44, 0x22, 0xb6, 0x03, 0x0a, 0x11, 0x4d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x06, 0x4d, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x4d, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x48, 0x61, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x4b, 0x65, 0x5a, 0x69, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x2e, 0x4d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x4b, 0x65, 0x5a, 0x69, 0x52, 0x09,
	0x4b, 0x65, 0x5a, 0x69, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x73, 0x48,
	0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x73, 0x48, 0x75, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x73, 0x48, 0x75, 0x61, 0x5a, 0x68, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x49, 0x73, 0x48, 0x75, 0x61, 0x5a, 0x68, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x54,
	0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x54, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x51, 0x75, 0x65, 0x4d, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x51, 0x75, 0x65, 0x4d, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x2e,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x07, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x53, 0x69,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x09, 0x53, 0x69, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x4f, 0x70, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x4f, 0x70, 0x48, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x78, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x4a, 0x58, 0x5a, 0x44, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x2d,
	0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xaf, 0x02,
	0x0a, 0x14, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x75, 0x43, 0x61, 0x72, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x75, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67,
	0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x0a, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22,
	0x56, 0x0a, 0x18, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x33, 0x0a, 0x15, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x18,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x53, 0x69, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x09, 0x53, 0x69, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52,
	0x09, 0x53, 0x69, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0x42, 0x0a, 0x1c, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x6c, 0x44, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x5b,
	0x0a, 0x19, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x22, 0x47, 0x0a, 0x21, 0x4d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x1b, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58,
	0x5a, 0x44, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x79, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x79, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x22, 0x6d, 0x0a, 0x1b, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64,
	0x22, 0x45, 0x0a, 0x1f, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x46, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x46,
	0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x22, 0x75, 0x0a, 0x18,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a,
	0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44,
	0x44, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x22, 0x58, 0x0a, 0x18, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a,
	0x44, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x54, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x4e, 0x6f, 0x54, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x58, 0x0a,
	0x1a, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x75, 0x61, 0x5a, 0x68, 0x75, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x48, 0x75, 0x61, 0x5a, 0x68, 0x75, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x06, 0x48, 0x75, 0x61, 0x5a, 0x68, 0x75, 0x22, 0x63, 0x0a, 0x13, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x75, 0x72, 0x50, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x75, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x13,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x48, 0x0a,
	0x14, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x14, 0x0a, 0x12, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x22, 0x41, 0x0a,
	0x13, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x52, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x69, 0x63, 0x65,
	0x22, 0x36, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61,
	0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x48,
	0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x4f, 0x0a, 0x17, 0x4d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x48,
	0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09,
	0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x51, 0x75, 0x65, 0x4d, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x51, 0x75, 0x65, 0x4d, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x51, 0x75, 0x65, 0x4d, 0x65, 0x6e, 0x22, 0x47, 0x0a, 0x15, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x51, 0x75, 0x65, 0x4d, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x51, 0x75,
	0x65, 0x4d, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x51, 0x75, 0x65, 0x4d,
	0x65, 0x6e, 0x22, 0x2b, 0x0a, 0x15, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44,
	0x44, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x22,
	0x44, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x4f, 0x75,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x43, 0x61, 0x72, 0x64, 0x22, 0x50, 0x0a, 0x15, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x58, 0x5a, 0x44, 0x44, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67,
	0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x69, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x58, 0x5a, 0x44, 0x44, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x22, 0x58, 0x0a, 0x13, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44,
	0x44, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x05, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x58, 0x5a, 0x44,
	0x44, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x2a, 0xe4, 0x02, 0x0a,
	0x07, 0x58, 0x5a, 0x44, 0x44, 0x46, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x5f, 0x58, 0x5a,
	0x44, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x46, 0x5f, 0x58, 0x5a, 0x44, 0x44, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x48, 0x55, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x46, 0x5f, 0x58, 0x5a, 0x44, 0x44, 0x5f, 0x58, 0x49, 0x41, 0x59, 0x55, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x5f, 0x58, 0x5a, 0x44, 0x44, 0x5f, 0x47, 0x55, 0x41, 0x46,
	0x45, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x5f, 0x58, 0x5a, 0x44, 0x44, 0x5f,
	0x42, 0x41, 0x4f, 0x59, 0x55, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x5f, 0x58, 0x5a, 0x44,
	0x44, 0x5f, 0x44, 0x55, 0x49, 0x44, 0x55, 0x49, 0x48, 0x55, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x5f, 0x58, 0x5a, 0x44, 0x44, 0x5f, 0x51, 0x49, 0x4e, 0x47, 0x59, 0x49, 0x53, 0x45, 0x10,
	0x06, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x5f, 0x58, 0x5a, 0x44, 0x44, 0x5f, 0x44, 0x41, 0x49, 0x59,
	0x41, 0x4f, 0x4a, 0x49, 0x55, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x5f, 0x58, 0x5a, 0x44,
	0x44, 0x5f, 0x51, 0x49, 0x44, 0x55, 0x49, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x5f, 0x58,
	0x5a, 0x44, 0x44, 0x5f, 0x51, 0x49, 0x4e, 0x47, 0x44, 0x55, 0x49, 0x10, 0x09, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x5f, 0x58, 0x5a, 0x44, 0x44, 0x5f, 0x4a, 0x49, 0x41, 0x4e, 0x47, 0x44, 0x55, 0x49,
	0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x5f, 0x58, 0x5a, 0x44, 0x44, 0x5f, 0x4c, 0x4f, 0x4e,
	0x47, 0x51, 0x49, 0x44, 0x55, 0x49, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x5f, 0x58, 0x5a,
	0x44, 0x44, 0x5f, 0x51, 0x49, 0x4e, 0x47, 0x51, 0x49, 0x44, 0x55, 0x49, 0x10, 0x0c, 0x12, 0x15,
	0x0a, 0x11, 0x46, 0x5f, 0x58, 0x5a, 0x44, 0x44, 0x5f, 0x51, 0x49, 0x4e, 0x47, 0x59, 0x41, 0x4f,
	0x4a, 0x49, 0x55, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x5f, 0x58, 0x5a, 0x44, 0x44, 0x5f,
	0x54, 0x49, 0x41, 0x4e, 0x48, 0x55, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x5f, 0x58, 0x5a,
	0x44, 0x44, 0x5f, 0x44, 0x49, 0x48, 0x55, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x5f, 0x58,
	0x5a, 0x44, 0x44, 0x5f, 0x51, 0x49, 0x4e, 0x47, 0x4c, 0x4f, 0x4e, 0x47, 0x51, 0x49, 0x44, 0x55,
	0x49, 0x10, 0x10, 0x2a, 0x6c, 0x0a, 0x08, 0x58, 0x5a, 0x44, 0x44, 0x4a, 0x46, 0x61, 0x6e, 0x12,
	0x13, 0x0a, 0x0f, 0x4a, 0x46, 0x5f, 0x58, 0x5a, 0x44, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x46, 0x5f, 0x58, 0x5a, 0x44, 0x44, 0x5f,
	0x47, 0x41, 0x4e, 0x47, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x48, 0x55, 0x41, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x4a, 0x46, 0x5f, 0x58, 0x5a, 0x44, 0x44, 0x5f, 0x47, 0x41, 0x4e, 0x47, 0x53, 0x48,
	0x41, 0x4e, 0x47, 0x50, 0x41, 0x4f, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x46, 0x5f, 0x58,
	0x5a, 0x44, 0x44, 0x5f, 0x48, 0x41, 0x49, 0x44, 0x49, 0x4c, 0x41, 0x4f, 0x59, 0x55, 0x45, 0x10,
	0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mahjongXZDD_proto_rawDescOnce sync.Once
	file_mahjongXZDD_proto_rawDescData = file_mahjongXZDD_proto_rawDesc
)

func file_mahjongXZDD_proto_rawDescGZIP() []byte {
	file_mahjongXZDD_proto_rawDescOnce.Do(func() {
		file_mahjongXZDD_proto_rawDescData = protoimpl.X.CompressGZIP(file_mahjongXZDD_proto_rawDescData)
	})
	return file_mahjongXZDD_proto_rawDescData
}

var file_mahjongXZDD_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mahjongXZDD_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_mahjongXZDD_proto_goTypes = []interface{}{
	(XZDDFan)(0),                              // 0: go.XZDDFan
	(XZDDJFan)(0),                             // 1: go.XZDDJFan
	(*MahjongXZDDKeZi)(nil),                   // 2: go.MahjongXZDDKeZi
	(*MahjongXZDDHint)(nil),                   // 3: go.MahjongXZDDHint
	(*MahjongXZDDSettle)(nil),                 // 4: go.MahjongXZDDSettle
	(*MahjongXZDDPlayer)(nil),                 // 5: go.MahjongXZDDPlayer
	(*EnterGameMJXZDDResp)(nil),               // 6: go.EnterGameMJXZDDResp
	(*MahjongXZDDSceneResp)(nil),              // 7: go.MahjongXZDDSceneResp
	(*MahjongXZDDStateFreeResp)(nil),          // 8: go.MahjongXZDDStateFreeResp
	(*MahjongXZDDDecideResp)(nil),             // 9: go.MahjongXZDDDecideResp
	(*MahjongXZDDSitDirectResp)(nil),          // 10: go.MahjongXZDDSitDirectResp
	(*MahjongXZDDStateRollDiceResp)(nil),      // 11: go.MahjongXZDDStateRollDiceResp
	(*MahjongXZDDStateStartResp)(nil),         // 12: go.MahjongXZDDStateStartResp
	(*MahjongXZDDStateExchangeThreeResp)(nil), // 13: go.MahjongXZDDStateExchangeThreeResp
	(*MahjongXZDDStateDingQueResp)(nil),       // 14: go.MahjongXZDDStateDingQueResp
	(*MahjongXZDDStatePlayingResp)(nil),       // 15: go.MahjongXZDDStatePlayingResp
	(*MahjongXZDDStateWaitOperateResp)(nil),   // 16: go.MahjongXZDDStateWaitOperateResp
	(*MahjongXZDDStateOpenResp)(nil),          // 17: go.MahjongXZDDStateOpenResp
	(*MahjongXZDDStateOverResp)(nil),          // 18: go.MahjongXZDDStateOverResp
	(*MahjongXZDDStateTingResp)(nil),          // 19: go.MahjongXZDDStateTingResp
	(*MahjongXZDDStateHuaZhuResp)(nil),        // 20: go.MahjongXZDDStateHuaZhuResp
	(*MahjongXZDDDealResp)(nil),               // 21: go.MahjongXZDDDealResp
	(*MahjongXZDDReadyReq)(nil),               // 22: go.MahjongXZDDReadyReq
	(*MahjongXZDDReadyResp)(nil),              // 23: go.MahjongXZDDReadyResp
	(*MahjongXZDDRollReq)(nil),                // 24: go.MahjongXZDDRollReq
	(*MahjongXZDDRollResp)(nil),               // 25: go.MahjongXZDDRollResp
	(*MahjongXZDDExchangeReq)(nil),            // 26: go.MahjongXZDDExchangeReq
	(*MahjongXZDDExchangeResp)(nil),           // 27: go.MahjongXZDDExchangeResp
	(*MahjongXZDDQueMenReq)(nil),              // 28: go.MahjongXZDDQueMenReq
	(*MahjongXZDDQueMenResp)(nil),             // 29: go.MahjongXZDDQueMenResp
	(*MahjongXZDDOutCardReq)(nil),             // 30: go.MahjongXZDDOutCardReq
	(*MahjongXZDDOutCardResp)(nil),            // 31: go.MahjongXZDDOutCardResp
	(*MahjongXZDDOperateReq)(nil),             // 32: go.MahjongXZDDOperateReq
	(*MahjongXZDDOperateResp)(nil),            // 33: go.MahjongXZDDOperateResp
	(*MahjongXZDDHintResp)(nil),               // 34: go.MahjongXZDDHintResp
	(MJOperate)(0),                            // 35: go.MJOperate
	(*PlayerInfo)(nil),                        // 36: go.PlayerInfo
	(Direct)(0),                               // 37: go.Direct
	(*TimeInfo)(nil),                          // 38: go.TimeInfo
}
var file_mahjongXZDD_proto_depIdxs = []int32{
	35, // 0: go.MahjongXZDDKeZi.Code:type_name -> go.MJOperate
	35, // 1: go.MahjongXZDDHint.Code:type_name -> go.MJOperate
	0,  // 2: go.MahjongXZDDSettle.Fan:type_name -> go.XZDDFan
	1,  // 3: go.MahjongXZDDSettle.JFan:type_name -> go.XZDDJFan
	36, // 4: go.MahjongXZDDPlayer.MyInfo:type_name -> go.PlayerInfo
	2,  // 5: go.MahjongXZDDPlayer.KeZiCards:type_name -> go.MahjongXZDDKeZi
	4,  // 6: go.MahjongXZDDPlayer.Settles:type_name -> go.MahjongXZDDSettle
	37, // 7: go.MahjongXZDDPlayer.SitDirect:type_name -> go.Direct
	3,  // 8: go.MahjongXZDDPlayer.OpHints:type_name -> go.MahjongXZDDHint
	5,  // 9: go.EnterGameMJXZDDResp.Player:type_name -> go.MahjongXZDDPlayer
	5,  // 10: go.MahjongXZDDSceneResp.AllPlayers:type_name -> go.MahjongXZDDPlayer
	38, // 11: go.MahjongXZDDStateFreeResp.Times:type_name -> go.TimeInfo
	37, // 12: go.MahjongXZDDSitDirectResp.SitDirect:type_name -> go.Direct
	38, // 13: go.MahjongXZDDStateRollDiceResp.Times:type_name -> go.TimeInfo
	38, // 14: go.MahjongXZDDStateStartResp.Times:type_name -> go.TimeInfo
	38, // 15: go.MahjongXZDDStateExchangeThreeResp.Times:type_name -> go.TimeInfo
	38, // 16: go.MahjongXZDDStateDingQueResp.Times:type_name -> go.TimeInfo
	38, // 17: go.MahjongXZDDStatePlayingResp.Times:type_name -> go.TimeInfo
	38, // 18: go.MahjongXZDDStateWaitOperateResp.Times:type_name -> go.TimeInfo
	38, // 19: go.MahjongXZDDStateOpenResp.Times:type_name -> go.TimeInfo
	38, // 20: go.MahjongXZDDStateOverResp.Times:type_name -> go.TimeInfo
	5,  // 21: go.MahjongXZDDStateOverResp.AllPlayers:type_name -> go.MahjongXZDDPlayer
	38, // 22: go.MahjongXZDDStateTingResp.Times:type_name -> go.TimeInfo
	38, // 23: go.MahjongXZDDStateHuaZhuResp.Times:type_name -> go.TimeInfo
	35, // 24: go.MahjongXZDDOperateReq.Code:type_name -> go.MJOperate
	35, // 25: go.MahjongXZDDOperateResp.Code:type_name -> go.MJOperate
	3,  // 26: go.MahjongXZDDHintResp.Hints:type_name -> go.MahjongXZDDHint
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_mahjongXZDD_proto_init() }
func file_mahjongXZDD_proto_init() {
	if File_mahjongXZDD_proto != nil {
		return
	}
	file_gamecomm_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mahjongXZDD_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDKeZi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDSettle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterGameMJXZDDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDSceneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDStateFreeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDDecideResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDSitDirectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDStateRollDiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDStateStartResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDStateExchangeThreeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDStateDingQueResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDStatePlayingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDStateWaitOperateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDStateOpenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDStateOverResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDStateTingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDStateHuaZhuResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDDealResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDReadyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDReadyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDRollReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDRollResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDExchangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDExchangeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDQueMenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDQueMenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDOutCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDOutCardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDOperateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDOperateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongXZDD_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongXZDDHintResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mahjongXZDD_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mahjongXZDD_proto_goTypes,
		DependencyIndexes: file_mahjongXZDD_proto_depIdxs,
		EnumInfos:         file_mahjongXZDD_proto_enumTypes,
		MessageInfos:      file_mahjongXZDD_proto_msgTypes,
	}.Build()
	File_mahjongXZDD_proto = out.File
	file_mahjongXZDD_proto_rawDesc = nil
	file_mahjongXZDD_proto_goTypes = nil
	file_mahjongXZDD_proto_depIdxs = nil
}
