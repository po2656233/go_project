// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: mahjongGD.proto

package _go

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//番种()
type FanGDT int32

const (
	FanGDT_FAN_GD_INVALID FanGDT = 0 //无效番种
)

// Enum value maps for FanGDT.
var (
	FanGDT_name = map[int32]string{
		0: "FAN_GD_INVALID",
	}
	FanGDT_value = map[string]int32{
		"FAN_GD_INVALID": 0,
	}
)

func (x FanGDT) Enum() *FanGDT {
	p := new(FanGDT)
	*p = x
	return p
}

func (x FanGDT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FanGDT) Descriptor() protoreflect.EnumDescriptor {
	return file_mahjongGD_proto_enumTypes[0].Descriptor()
}

func (FanGDT) Type() protoreflect.EnumType {
	return &file_mahjongGD_proto_enumTypes[0]
}

func (x FanGDT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FanGDT.Descriptor instead.
func (FanGDT) EnumDescriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{0}
}

// kindID 3006
////////////////////牌值定义/////////////////////////////
//		1 ~ 9 : 一万 ~ 9万
//		11 ~ 19 : 一条 ~ 9条
//		21 ~ 29 : 一筒 ~ 9筒
//		31 ~ 34 : 东、南、西、北风
//		41 : 发财
//		42 : 红中
//		43 : 白板
//		51 ~ 54 : 春夏秋冬
//		61 ~ 64 : 四种花色(梅兰竹菊)
/////////////////////玩家座位//////////////////////////////
//        骰子方位转换(弃用)
//    东 : 1,5,9  代表东
//    南 : 2,6,10 代表南
//    西 : 3,7,11 代表西
//    北 : 4,8,12 代表北
//    通过摸东、南、西、北风决定方位
/////////////////////风圈解义//////////////////////////////
// 一场麻将里有4个风圈（第一圈为东风圈、第二圈为南风圈、第三圈为西风圈、第四圈为北风圈）
// 每个风圈里有4局（第一局为东风局、第二局为南风局、第三局为西风局、第四局为北风局）
// 国标麻将，轮流坐庄，没有连续坐庄一说。
/////////////////////门风解义//////////////////////////////
// 门前发牌的那一家,门风为东，然后依照逆时钟方向计算
/////////////////////番型解义(请看文件末部)///////////////////
//刻子
type MahjongGDKeZi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []int32   `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`
	Code  MJOperate `protobuf:"varint,2,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"`
	ByUid uint64    `protobuf:"varint,3,opt,name=ByUid,proto3" json:"ByUid,omitempty"` // 由谁提供
}

func (x *MahjongGDKeZi) Reset() {
	*x = MahjongGDKeZi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDKeZi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDKeZi) ProtoMessage() {}

func (x *MahjongGDKeZi) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDKeZi.ProtoReflect.Descriptor instead.
func (*MahjongGDKeZi) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{0}
}

func (x *MahjongGDKeZi) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MahjongGDKeZi) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongGDKeZi) GetByUid() uint64 {
	if x != nil {
		return x.ByUid
	}
	return 0
}

//提示
type MahjongGDHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  MJOperate `protobuf:"varint,1,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码
	Cards []int32   `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 听哪几张牌| 胡牌和自摸皆为一张
	ByUid uint64    `protobuf:"varint,3,opt,name=ByUid,proto3" json:"ByUid,omitempty"`                 // 由谁提供
}

func (x *MahjongGDHint) Reset() {
	*x = MahjongGDHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDHint) ProtoMessage() {}

func (x *MahjongGDHint) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDHint.ProtoReflect.Descriptor instead.
func (*MahjongGDHint) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{1}
}

func (x *MahjongGDHint) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongGDHint) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MahjongGDHint) GetByUid() uint64 {
	if x != nil {
		return x.ByUid
	}
	return 0
}

//麻将玩家信息
type MahjongGDPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyInfo     *PlayerInfo      `protobuf:"bytes,1,opt,name=MyInfo,proto3" json:"MyInfo,omitempty"`                       //
	HandCards  []int32          `protobuf:"varint,2,rep,packed,name=HandCards,proto3" json:"HandCards,omitempty"`         //手牌
	KeZiCards  []*MahjongGDKeZi `protobuf:"bytes,3,rep,name=KeZiCards,proto3" json:"KeZiCards,omitempty"`                 // 吃牌 桌牌:明在桌面上的牌,即碰、吃、杠后的牌
	TableCards []int32          `protobuf:"varint,4,rep,packed,name=TableCards,proto3" json:"TableCards,omitempty"`       //玩家的桌面牌值
	IsTing     bool             `protobuf:"varint,5,opt,name=IsTing,proto3" json:"IsTing,omitempty"`                      //是否听牌
	GainScore  int64            `protobuf:"varint,6,opt,name=GainScore,proto3" json:"GainScore,omitempty"`                //输赢分值
	TotalScore int64            `protobuf:"varint,7,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`              //总积分(当不为系统房时,该分值可以为负分)
	MenFeng    Direct           `protobuf:"varint,8,opt,name=MenFeng,proto3,enum=go.Direct" json:"MenFeng,omitempty"`     //门风(庄家==东风)
	SitDirect  Direct           `protobuf:"varint,9,opt,name=SitDirect,proto3,enum=go.Direct" json:"SitDirect,omitempty"` //座位方位
	OpHints    []*MahjongGDHint `protobuf:"bytes,10,rep,name=OpHints,proto3" json:"OpHints,omitempty"`                    //玩家可操作(恢复场景)
}

func (x *MahjongGDPlayer) Reset() {
	*x = MahjongGDPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDPlayer) ProtoMessage() {}

func (x *MahjongGDPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDPlayer.ProtoReflect.Descriptor instead.
func (*MahjongGDPlayer) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{2}
}

func (x *MahjongGDPlayer) GetMyInfo() *PlayerInfo {
	if x != nil {
		return x.MyInfo
	}
	return nil
}

func (x *MahjongGDPlayer) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *MahjongGDPlayer) GetKeZiCards() []*MahjongGDKeZi {
	if x != nil {
		return x.KeZiCards
	}
	return nil
}

func (x *MahjongGDPlayer) GetTableCards() []int32 {
	if x != nil {
		return x.TableCards
	}
	return nil
}

func (x *MahjongGDPlayer) GetIsTing() bool {
	if x != nil {
		return x.IsTing
	}
	return false
}

func (x *MahjongGDPlayer) GetGainScore() int64 {
	if x != nil {
		return x.GainScore
	}
	return 0
}

func (x *MahjongGDPlayer) GetTotalScore() int64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *MahjongGDPlayer) GetMenFeng() Direct {
	if x != nil {
		return x.MenFeng
	}
	return Direct_Centre
}

func (x *MahjongGDPlayer) GetSitDirect() Direct {
	if x != nil {
		return x.SitDirect
	}
	return Direct_Centre
}

func (x *MahjongGDPlayer) GetOpHints() []*MahjongGDHint {
	if x != nil {
		return x.OpHints
	}
	return nil
}

//入场
type EnterGameMJGDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID   uint64           `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`     //游戏标识
	ChairNum uint32           `protobuf:"varint,2,opt,name=ChairNum,proto3" json:"ChairNum,omitempty"` //椅子编号(不满足req的此项时,将由系统分配,并返回提示)
	Player   *MahjongGDPlayer `protobuf:"bytes,3,opt,name=Player,proto3" json:"Player,omitempty"`
}

func (x *EnterGameMJGDResp) Reset() {
	*x = EnterGameMJGDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterGameMJGDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterGameMJGDResp) ProtoMessage() {}

func (x *EnterGameMJGDResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterGameMJGDResp.ProtoReflect.Descriptor instead.
func (*EnterGameMJGDResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{3}
}

func (x *EnterGameMJGDResp) GetGameID() uint64 {
	if x != nil {
		return x.GameID
	}
	return 0
}

func (x *EnterGameMJGDResp) GetChairNum() uint32 {
	if x != nil {
		return x.ChairNum
	}
	return 0
}

func (x *EnterGameMJGDResp) GetPlayer() *MahjongGDPlayer {
	if x != nil {
		return x.Player
	}
	return nil
}

//场景
type MahjongGDSceneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp   int64              `protobuf:"varint,1,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`              // 时间戳
	RunCount    int32              `protobuf:"varint,2,opt,name=RunCount,proto3" json:"RunCount,omitempty"`                // 当前局数
	RemainCount int32              `protobuf:"varint,3,opt,name=RemainCount,proto3" json:"RemainCount,omitempty"`          // 剩余张数
	BankerID    uint64             `protobuf:"varint,4,opt,name=BankerID,proto3" json:"BankerID,omitempty"`                // 庄家ID
	CurrentID   uint64             `protobuf:"varint,5,opt,name=CurrentID,proto3" json:"CurrentID,omitempty"`              // 当前玩家ID
	Inning      string             `protobuf:"bytes,6,opt,name=Inning,proto3" json:"Inning,omitempty"`                     // 牌局号
	HuCard      int32              `protobuf:"varint,7,opt,name=HuCard,proto3" json:"HuCard,omitempty"`                    // 胡牌,或自摸时的摸起的最后一张
	QuanFeng    Direct             `protobuf:"varint,8,opt,name=QuanFeng,proto3,enum=go.Direct" json:"QuanFeng,omitempty"` // 当前局的圈风
	StartPos    int32              `protobuf:"varint,9,opt,name=StartPos,proto3" json:"StartPos,omitempty"`                // 抓牌起始位置(即保留不抓取的牌墙)
	AllPlayers  []*MahjongGDPlayer `protobuf:"bytes,10,rep,name=AllPlayers,proto3" json:"AllPlayers,omitempty"`            //玩家列表(吃碰杠)
}

func (x *MahjongGDSceneResp) Reset() {
	*x = MahjongGDSceneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDSceneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDSceneResp) ProtoMessage() {}

func (x *MahjongGDSceneResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDSceneResp.ProtoReflect.Descriptor instead.
func (*MahjongGDSceneResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{4}
}

func (x *MahjongGDSceneResp) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *MahjongGDSceneResp) GetRunCount() int32 {
	if x != nil {
		return x.RunCount
	}
	return 0
}

func (x *MahjongGDSceneResp) GetRemainCount() int32 {
	if x != nil {
		return x.RemainCount
	}
	return 0
}

func (x *MahjongGDSceneResp) GetBankerID() uint64 {
	if x != nil {
		return x.BankerID
	}
	return 0
}

func (x *MahjongGDSceneResp) GetCurrentID() uint64 {
	if x != nil {
		return x.CurrentID
	}
	return 0
}

func (x *MahjongGDSceneResp) GetInning() string {
	if x != nil {
		return x.Inning
	}
	return ""
}

func (x *MahjongGDSceneResp) GetHuCard() int32 {
	if x != nil {
		return x.HuCard
	}
	return 0
}

func (x *MahjongGDSceneResp) GetQuanFeng() Direct {
	if x != nil {
		return x.QuanFeng
	}
	return Direct_Centre
}

func (x *MahjongGDSceneResp) GetStartPos() int32 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

func (x *MahjongGDSceneResp) GetAllPlayers() []*MahjongGDPlayer {
	if x != nil {
		return x.AllPlayers
	}
	return nil
}

//状态
// 服务端推送
//(空闲 - Free)
type MahjongGDStateFreeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times  *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	Inning string    `protobuf:"bytes,2,opt,name=Inning,proto3" json:"Inning,omitempty"` // 牌局号
}

func (x *MahjongGDStateFreeResp) Reset() {
	*x = MahjongGDStateFreeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDStateFreeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDStateFreeResp) ProtoMessage() {}

func (x *MahjongGDStateFreeResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDStateFreeResp.ProtoReflect.Descriptor instead.
func (*MahjongGDStateFreeResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{5}
}

func (x *MahjongGDStateFreeResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongGDStateFreeResp) GetInning() string {
	if x != nil {
		return x.Inning
	}
	return ""
}

//方位 - Direct (调整座位:仅在第一局开始需决定所座方位,或座位替换新玩家)
type MahjongGDStateDirectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times    *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	MyDirect Direct    `protobuf:"varint,2,opt,name=MyDirect,proto3,enum=go.Direct" json:"MyDirect,omitempty"` //东南西北(系统决定)
}

func (x *MahjongGDStateDirectResp) Reset() {
	*x = MahjongGDStateDirectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDStateDirectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDStateDirectResp) ProtoMessage() {}

func (x *MahjongGDStateDirectResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDStateDirectResp.ProtoReflect.Descriptor instead.
func (*MahjongGDStateDirectResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{6}
}

func (x *MahjongGDStateDirectResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongGDStateDirectResp) GetMyDirect() Direct {
	if x != nil {
		return x.MyDirect
	}
	return Direct_Centre
}

//定庄 - Decide 系统定庄
type MahjongGDStateDecideResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times    *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	BankerID uint64    `protobuf:"varint,2,opt,name=BankerID,proto3" json:"BankerID,omitempty"`                // 首局默认座位东方的为庄家
	QuanFeng Direct    `protobuf:"varint,3,opt,name=QuanFeng,proto3,enum=go.Direct" json:"QuanFeng,omitempty"` // 当前局的圈风
	MenFeng  Direct    `protobuf:"varint,4,opt,name=MenFeng,proto3,enum=go.Direct" json:"MenFeng,omitempty"`   // 玩家的门风
}

func (x *MahjongGDStateDecideResp) Reset() {
	*x = MahjongGDStateDecideResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDStateDecideResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDStateDecideResp) ProtoMessage() {}

func (x *MahjongGDStateDecideResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDStateDecideResp.ProtoReflect.Descriptor instead.
func (*MahjongGDStateDecideResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{7}
}

func (x *MahjongGDStateDecideResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongGDStateDecideResp) GetBankerID() uint64 {
	if x != nil {
		return x.BankerID
	}
	return 0
}

func (x *MahjongGDStateDecideResp) GetQuanFeng() Direct {
	if x != nil {
		return x.QuanFeng
	}
	return Direct_Centre
}

func (x *MahjongGDStateDecideResp) GetMenFeng() Direct {
	if x != nil {
		return x.MenFeng
	}
	return Direct_Centre
}

//开始掷骰子 - RollDice 注:决定牌堆的起始位置
type MahjongGDStateRollDiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongGDStateRollDiceResp) Reset() {
	*x = MahjongGDStateRollDiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDStateRollDiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDStateRollDiceResp) ProtoMessage() {}

func (x *MahjongGDStateRollDiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDStateRollDiceResp.ProtoReflect.Descriptor instead.
func (*MahjongGDStateRollDiceResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{8}
}

func (x *MahjongGDStateRollDiceResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//(开始游戏) - Start
type MahjongGDStateStartResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times    *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	StartPos int32     `protobuf:"varint,2,opt,name=StartPos,proto3" json:"StartPos,omitempty"` //抓牌起始位置(即保留不抓取的牌墙)
}

func (x *MahjongGDStateStartResp) Reset() {
	*x = MahjongGDStateStartResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDStateStartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDStateStartResp) ProtoMessage() {}

func (x *MahjongGDStateStartResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDStateStartResp.ProtoReflect.Descriptor instead.
func (*MahjongGDStateStartResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{9}
}

func (x *MahjongGDStateStartResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongGDStateStartResp) GetStartPos() int32 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

//(游戏中) - Playing
type MahjongGDStatePlayingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times  *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	UserID uint64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"` // 轮到谁
	Card   int32     `protobuf:"varint,3,opt,name=Card,proto3" json:"Card,omitempty"`     // 只有UserID的玩家有牌值
}

func (x *MahjongGDStatePlayingResp) Reset() {
	*x = MahjongGDStatePlayingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDStatePlayingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDStatePlayingResp) ProtoMessage() {}

func (x *MahjongGDStatePlayingResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDStatePlayingResp.ProtoReflect.Descriptor instead.
func (*MahjongGDStatePlayingResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{10}
}

func (x *MahjongGDStatePlayingResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongGDStatePlayingResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongGDStatePlayingResp) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

//等待操作(仅对有提示的玩家提供)
type MahjongGDStateWaitOperateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongGDStateWaitOperateResp) Reset() {
	*x = MahjongGDStateWaitOperateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDStateWaitOperateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDStateWaitOperateResp) ProtoMessage() {}

func (x *MahjongGDStateWaitOperateResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDStateWaitOperateResp.ProtoReflect.Descriptor instead.
func (*MahjongGDStateWaitOperateResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{11}
}

func (x *MahjongGDStateWaitOperateResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//(开奖) - Opening
type MahjongGDStateOpenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times      *TimeInfo          `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	IsFlow     bool               `protobuf:"varint,2,opt,name=IsFlow,proto3" json:"IsFlow,omitempty"`        // 是否流局
	HuCard     int32              `protobuf:"varint,3,opt,name=HuCard,proto3" json:"HuCard,omitempty"`        // 胡牌,或自摸时的摸起的最后一张
	WinnerID   uint64             `protobuf:"varint,4,opt,name=WinnerID,proto3" json:"WinnerID,omitempty"`    //胜利者ID（流局时为0）
	Fans       []byte             `protobuf:"bytes,5,opt,name=Fans,proto3" json:"Fans,omitempty"`             //番型列表 每个元素对应一个番型
	FanCount   int32              `protobuf:"varint,6,opt,name=FanCount,proto3" json:"FanCount,omitempty"`    //共计番数
	AllPlayers []*MahjongGDPlayer `protobuf:"bytes,7,rep,name=AllPlayers,proto3" json:"AllPlayers,omitempty"` //所有玩家得分
}

func (x *MahjongGDStateOpenResp) Reset() {
	*x = MahjongGDStateOpenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDStateOpenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDStateOpenResp) ProtoMessage() {}

func (x *MahjongGDStateOpenResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDStateOpenResp.ProtoReflect.Descriptor instead.
func (*MahjongGDStateOpenResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{12}
}

func (x *MahjongGDStateOpenResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongGDStateOpenResp) GetIsFlow() bool {
	if x != nil {
		return x.IsFlow
	}
	return false
}

func (x *MahjongGDStateOpenResp) GetHuCard() int32 {
	if x != nil {
		return x.HuCard
	}
	return 0
}

func (x *MahjongGDStateOpenResp) GetWinnerID() uint64 {
	if x != nil {
		return x.WinnerID
	}
	return 0
}

func (x *MahjongGDStateOpenResp) GetFans() []byte {
	if x != nil {
		return x.Fans
	}
	return nil
}

func (x *MahjongGDStateOpenResp) GetFanCount() int32 {
	if x != nil {
		return x.FanCount
	}
	return 0
}

func (x *MahjongGDStateOpenResp) GetAllPlayers() []*MahjongGDPlayer {
	if x != nil {
		return x.AllPlayers
	}
	return nil
}

//(结束) - Over
type MahjongGDStateOverResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongGDStateOverResp) Reset() {
	*x = MahjongGDStateOverResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDStateOverResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDStateOverResp) ProtoMessage() {}

func (x *MahjongGDStateOverResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDStateOverResp.ProtoReflect.Descriptor instead.
func (*MahjongGDStateOverResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{13}
}

func (x *MahjongGDStateOverResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//////////////////////////////////////////////
//准备
type MahjongGDReadyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReady bool `protobuf:"varint,1,opt,name=IsReady,proto3" json:"IsReady,omitempty"` // 玩家准备，可以取消准备
}

func (x *MahjongGDReadyReq) Reset() {
	*x = MahjongGDReadyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDReadyReq) ProtoMessage() {}

func (x *MahjongGDReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDReadyReq.ProtoReflect.Descriptor instead.
func (*MahjongGDReadyReq) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{14}
}

func (x *MahjongGDReadyReq) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

type MahjongGDReadyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IsReady bool   `protobuf:"varint,2,opt,name=IsReady,proto3" json:"IsReady,omitempty"` // 玩家准备，可以取消准备
}

func (x *MahjongGDReadyResp) Reset() {
	*x = MahjongGDReadyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDReadyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDReadyResp) ProtoMessage() {}

func (x *MahjongGDReadyResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDReadyResp.ProtoReflect.Descriptor instead.
func (*MahjongGDReadyResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{15}
}

func (x *MahjongGDReadyResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongGDReadyResp) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

//
//庄家扔骰子
type MahjongGDRollReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongGDRollReq) Reset() {
	*x = MahjongGDRollReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDRollReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDRollReq) ProtoMessage() {}

func (x *MahjongGDRollReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDRollReq.ProtoReflect.Descriptor instead.
func (*MahjongGDRollReq) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{16}
}

type MahjongGDRollResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Dice   []byte `protobuf:"bytes,2,opt,name=Dice,proto3" json:"Dice,omitempty"` //骰子决定,起抓牌位置
}

func (x *MahjongGDRollResp) Reset() {
	*x = MahjongGDRollResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDRollResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDRollResp) ProtoMessage() {}

func (x *MahjongGDRollResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDRollResp.ProtoReflect.Descriptor instead.
func (*MahjongGDRollResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{17}
}

func (x *MahjongGDRollResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongGDRollResp) GetDice() []byte {
	if x != nil {
		return x.Dice
	}
	return nil
}

// 玩家打出去的牌
type MahjongGDOutCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card int32 `protobuf:"varint,1,opt,name=Card,proto3" json:"Card,omitempty"` //
}

func (x *MahjongGDOutCardReq) Reset() {
	*x = MahjongGDOutCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDOutCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDOutCardReq) ProtoMessage() {}

func (x *MahjongGDOutCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDOutCardReq.ProtoReflect.Descriptor instead.
func (*MahjongGDOutCardReq) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{18}
}

func (x *MahjongGDOutCardReq) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

type MahjongGDOutCardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"` // 玩家ID
	Card   int32  `protobuf:"varint,2,opt,name=Card,proto3" json:"Card,omitempty"`     //
}

func (x *MahjongGDOutCardResp) Reset() {
	*x = MahjongGDOutCardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDOutCardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDOutCardResp) ProtoMessage() {}

func (x *MahjongGDOutCardResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDOutCardResp.ProtoReflect.Descriptor instead.
func (*MahjongGDOutCardResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{19}
}

func (x *MahjongGDOutCardResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongGDOutCardResp) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

// 操作
type MahjongGDOperateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  MJOperate `protobuf:"varint,1,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码 pass表示弃牌
	Cards []int32   `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 吃|碰|杠 时的手牌
}

func (x *MahjongGDOperateReq) Reset() {
	*x = MahjongGDOperateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDOperateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDOperateReq) ProtoMessage() {}

func (x *MahjongGDOperateReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDOperateReq.ProtoReflect.Descriptor instead.
func (*MahjongGDOperateReq) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{20}
}

func (x *MahjongGDOperateReq) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongGDOperateReq) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

type MahjongGDOperateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`               // 玩家ID
	Code   MJOperate `protobuf:"varint,2,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码
	Cards  []int32   `protobuf:"varint,3,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 吃|碰|杠 时的组合牌
}

func (x *MahjongGDOperateResp) Reset() {
	*x = MahjongGDOperateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDOperateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDOperateResp) ProtoMessage() {}

func (x *MahjongGDOperateResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDOperateResp.ProtoReflect.Descriptor instead.
func (*MahjongGDOperateResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{21}
}

func (x *MahjongGDOperateResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongGDOperateResp) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongGDOperateResp) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

////////////////////////////////
//
//发牌
type MahjongGDDealResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    uint64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`              // 玩家ID
	CurPos    int32   `protobuf:"varint,2,opt,name=CurPos,proto3" json:"CurPos,omitempty"`              // 抓牌起始位置
	HandCards []int32 `protobuf:"varint,3,rep,packed,name=HandCards,proto3" json:"HandCards,omitempty"` // 玩家的手牌(座位上的玩家才有,且只能拿到自己的牌值)
}

func (x *MahjongGDDealResp) Reset() {
	*x = MahjongGDDealResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDDealResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDDealResp) ProtoMessage() {}

func (x *MahjongGDDealResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDDealResp.ProtoReflect.Descriptor instead.
func (*MahjongGDDealResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{22}
}

func (x *MahjongGDDealResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongGDDealResp) GetCurPos() int32 {
	if x != nil {
		return x.CurPos
	}
	return 0
}

func (x *MahjongGDDealResp) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

//
// 玩家只能收到自己的
type MahjongGDHintResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64           `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"` // 玩家ID
	Hints  []*MahjongGDHint `protobuf:"bytes,2,rep,name=Hints,proto3" json:"Hints,omitempty"`    //提示 注意:吃牌时,有多种组合 cards仅提供玩家手牌牌值
}

func (x *MahjongGDHintResp) Reset() {
	*x = MahjongGDHintResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongGD_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongGDHintResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongGDHintResp) ProtoMessage() {}

func (x *MahjongGDHintResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongGD_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongGDHintResp.ProtoReflect.Descriptor instead.
func (*MahjongGDHintResp) Descriptor() ([]byte, []int) {
	return file_mahjongGD_proto_rawDescGZIP(), []int{23}
}

func (x *MahjongGDHintResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongGDHintResp) GetHints() []*MahjongGDHint {
	if x != nil {
		return x.Hints
	}
	return nil
}

var File_mahjongGD_proto protoreflect.FileDescriptor

var file_mahjongGD_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x67, 0x6f, 0x1a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x0d, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x47, 0x44, 0x4b, 0x65, 0x5a, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x2e,
	0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x42, 0x79, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x42, 0x79, 0x55, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x0d, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x47, 0x44, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x42, 0x79, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x42, 0x79, 0x55, 0x69, 0x64, 0x22, 0xfb, 0x02, 0x0a, 0x0f, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x47, 0x44, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x4d, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x4d, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x2f, 0x0a, 0x09, 0x4b, 0x65, 0x5a, 0x69, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47,
	0x44, 0x4b, 0x65, 0x5a, 0x69, 0x52, 0x09, 0x4b, 0x65, 0x5a, 0x69, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x54, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x49, 0x73, 0x54, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x69, 0x6e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x61, 0x69,
	0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x6e, 0x46, 0x65, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x4d, 0x65, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x09,
	0x53, 0x69, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x09, 0x53, 0x69, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x4f, 0x70, 0x48, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x4f, 0x70, 0x48, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x74, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x4a, 0x47, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x06,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67,
	0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xd3, 0x02, 0x0a, 0x12, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x48, 0x75, 0x43, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x48, 0x75, 0x43, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x46, 0x65,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x41, 0x6c,
	0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x0a, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22,
	0x54, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x66, 0x0a, 0x18, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x47, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x4d, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x08, 0x4d, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0xa8, 0x01,
	0x0a, 0x18, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x08, 0x51, 0x75,
	0x61, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67,
	0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x46, 0x65,
	0x6e, 0x67, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52,
	0x07, 0x4d, 0x65, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x22, 0x40, 0x0a, 0x1a, 0x4d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x47, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x44, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x17, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x22, 0x6b, 0x0a, 0x19, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x47, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61,
	0x72, 0x64, 0x22, 0x43, 0x0a, 0x1d, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x47, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x46, 0x6c, 0x6f, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x16,
	0x0a, 0x06, 0x48, 0x75, 0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x48, 0x75, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x46, 0x61, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x47, 0x44, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a, 0x41, 0x6c, 0x6c,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x3c, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x47, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x11, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x47, 0x44, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x22, 0x46, 0x0a, 0x12, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47,
	0x44, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x12, 0x0a, 0x10,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x22, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x52, 0x6f, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x44, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x69, 0x63,
	0x65, 0x22, 0x29, 0x0a, 0x13, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x4f, 0x75,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x22, 0x42, 0x0a, 0x14,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64,
	0x22, 0x4e, 0x0a, 0x13, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x67, 0x0a, 0x14, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x11, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x75, 0x72, 0x50, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x75, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x54, 0x0a, 0x11,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x05, 0x48, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x47, 0x44, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x48, 0x69, 0x6e,
	0x74, 0x73, 0x2a, 0x1d, 0x0a, 0x07, 0x46, 0x61, 0x6e, 0x47, 0x44, 0x5f, 0x74, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x41, 0x4e, 0x5f, 0x47, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mahjongGD_proto_rawDescOnce sync.Once
	file_mahjongGD_proto_rawDescData = file_mahjongGD_proto_rawDesc
)

func file_mahjongGD_proto_rawDescGZIP() []byte {
	file_mahjongGD_proto_rawDescOnce.Do(func() {
		file_mahjongGD_proto_rawDescData = protoimpl.X.CompressGZIP(file_mahjongGD_proto_rawDescData)
	})
	return file_mahjongGD_proto_rawDescData
}

var file_mahjongGD_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mahjongGD_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_mahjongGD_proto_goTypes = []interface{}{
	(FanGDT)(0),                           // 0: go.FanGD_t
	(*MahjongGDKeZi)(nil),                 // 1: go.MahjongGDKeZi
	(*MahjongGDHint)(nil),                 // 2: go.MahjongGDHint
	(*MahjongGDPlayer)(nil),               // 3: go.MahjongGDPlayer
	(*EnterGameMJGDResp)(nil),             // 4: go.EnterGameMJGDResp
	(*MahjongGDSceneResp)(nil),            // 5: go.MahjongGDSceneResp
	(*MahjongGDStateFreeResp)(nil),        // 6: go.MahjongGDStateFreeResp
	(*MahjongGDStateDirectResp)(nil),      // 7: go.MahjongGDStateDirectResp
	(*MahjongGDStateDecideResp)(nil),      // 8: go.MahjongGDStateDecideResp
	(*MahjongGDStateRollDiceResp)(nil),    // 9: go.MahjongGDStateRollDiceResp
	(*MahjongGDStateStartResp)(nil),       // 10: go.MahjongGDStateStartResp
	(*MahjongGDStatePlayingResp)(nil),     // 11: go.MahjongGDStatePlayingResp
	(*MahjongGDStateWaitOperateResp)(nil), // 12: go.MahjongGDStateWaitOperateResp
	(*MahjongGDStateOpenResp)(nil),        // 13: go.MahjongGDStateOpenResp
	(*MahjongGDStateOverResp)(nil),        // 14: go.MahjongGDStateOverResp
	(*MahjongGDReadyReq)(nil),             // 15: go.MahjongGDReadyReq
	(*MahjongGDReadyResp)(nil),            // 16: go.MahjongGDReadyResp
	(*MahjongGDRollReq)(nil),              // 17: go.MahjongGDRollReq
	(*MahjongGDRollResp)(nil),             // 18: go.MahjongGDRollResp
	(*MahjongGDOutCardReq)(nil),           // 19: go.MahjongGDOutCardReq
	(*MahjongGDOutCardResp)(nil),          // 20: go.MahjongGDOutCardResp
	(*MahjongGDOperateReq)(nil),           // 21: go.MahjongGDOperateReq
	(*MahjongGDOperateResp)(nil),          // 22: go.MahjongGDOperateResp
	(*MahjongGDDealResp)(nil),             // 23: go.MahjongGDDealResp
	(*MahjongGDHintResp)(nil),             // 24: go.MahjongGDHintResp
	(MJOperate)(0),                        // 25: go.MJOperate
	(*PlayerInfo)(nil),                    // 26: go.PlayerInfo
	(Direct)(0),                           // 27: go.Direct
	(*TimeInfo)(nil),                      // 28: go.TimeInfo
}
var file_mahjongGD_proto_depIdxs = []int32{
	25, // 0: go.MahjongGDKeZi.Code:type_name -> go.MJOperate
	25, // 1: go.MahjongGDHint.Code:type_name -> go.MJOperate
	26, // 2: go.MahjongGDPlayer.MyInfo:type_name -> go.PlayerInfo
	1,  // 3: go.MahjongGDPlayer.KeZiCards:type_name -> go.MahjongGDKeZi
	27, // 4: go.MahjongGDPlayer.MenFeng:type_name -> go.Direct
	27, // 5: go.MahjongGDPlayer.SitDirect:type_name -> go.Direct
	2,  // 6: go.MahjongGDPlayer.OpHints:type_name -> go.MahjongGDHint
	3,  // 7: go.EnterGameMJGDResp.Player:type_name -> go.MahjongGDPlayer
	27, // 8: go.MahjongGDSceneResp.QuanFeng:type_name -> go.Direct
	3,  // 9: go.MahjongGDSceneResp.AllPlayers:type_name -> go.MahjongGDPlayer
	28, // 10: go.MahjongGDStateFreeResp.Times:type_name -> go.TimeInfo
	28, // 11: go.MahjongGDStateDirectResp.Times:type_name -> go.TimeInfo
	27, // 12: go.MahjongGDStateDirectResp.MyDirect:type_name -> go.Direct
	28, // 13: go.MahjongGDStateDecideResp.Times:type_name -> go.TimeInfo
	27, // 14: go.MahjongGDStateDecideResp.QuanFeng:type_name -> go.Direct
	27, // 15: go.MahjongGDStateDecideResp.MenFeng:type_name -> go.Direct
	28, // 16: go.MahjongGDStateRollDiceResp.Times:type_name -> go.TimeInfo
	28, // 17: go.MahjongGDStateStartResp.Times:type_name -> go.TimeInfo
	28, // 18: go.MahjongGDStatePlayingResp.Times:type_name -> go.TimeInfo
	28, // 19: go.MahjongGDStateWaitOperateResp.Times:type_name -> go.TimeInfo
	28, // 20: go.MahjongGDStateOpenResp.Times:type_name -> go.TimeInfo
	3,  // 21: go.MahjongGDStateOpenResp.AllPlayers:type_name -> go.MahjongGDPlayer
	28, // 22: go.MahjongGDStateOverResp.Times:type_name -> go.TimeInfo
	25, // 23: go.MahjongGDOperateReq.Code:type_name -> go.MJOperate
	25, // 24: go.MahjongGDOperateResp.Code:type_name -> go.MJOperate
	2,  // 25: go.MahjongGDHintResp.Hints:type_name -> go.MahjongGDHint
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_mahjongGD_proto_init() }
func file_mahjongGD_proto_init() {
	if File_mahjongGD_proto != nil {
		return
	}
	file_gamecomm_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mahjongGD_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDKeZi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterGameMJGDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDSceneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDStateFreeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDStateDirectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDStateDecideResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDStateRollDiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDStateStartResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDStatePlayingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDStateWaitOperateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDStateOpenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDStateOverResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDReadyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDReadyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDRollReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDRollResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDOutCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDOutCardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDOperateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDOperateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDDealResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongGD_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongGDHintResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mahjongGD_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mahjongGD_proto_goTypes,
		DependencyIndexes: file_mahjongGD_proto_depIdxs,
		EnumInfos:         file_mahjongGD_proto_enumTypes,
		MessageInfos:      file_mahjongGD_proto_msgTypes,
	}.Build()
	File_mahjongGD_proto = out.File
	file_mahjongGD_proto_rawDesc = nil
	file_mahjongGD_proto_goTypes = nil
	file_mahjongGD_proto_depIdxs = nil
}
