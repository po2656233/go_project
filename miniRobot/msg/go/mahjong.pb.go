// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: mahjong.proto

package _go

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//番种()
type FanT int32

const (
	FanT_FAN_INVALID FanT = 0 //无效番种
	//========88番========
	FanT_FAN_DASIXI         FanT = 1 //大四喜
	FanT_FAN_DASANYUAN      FanT = 2 //大三元
	FanT_FAN_LVYISE         FanT = 3 //绿一色
	FanT_FAN_JIULIANBAODENG FanT = 4 //九莲宝灯
	FanT_FAN_SIGANG         FanT = 5 //四杠
	FanT_FAN_LIANQIDUI      FanT = 6 //连七对
	FanT_FAN_SHISANYAO      FanT = 7 //十三幺
	//========64番========
	FanT_FAN_QINGYAOJIU        FanT = 8  //清幺九
	FanT_FAN_XIAOSIXI          FanT = 9  //小四喜
	FanT_FAN_XIAOSANYUAN       FanT = 10 //小三元
	FanT_FAN_ZIYISE            FanT = 11 //字一色
	FanT_FAN_SIANKE            FanT = 12 //四暗刻
	FanT_FAN_YISESHUANGLONGHUI FanT = 13 //一色双龙会
	//========48番========
	FanT_FAN_YISESITONGSHUN FanT = 14 //一色四同顺
	FanT_FAN_YISESIJIEGAO   FanT = 15 //一色四节高
	//========32番========
	FanT_FAN_YISESIBUGAO FanT = 16 //一色四步高
	FanT_FAN_SANGANG     FanT = 17 //三杠
	FanT_FAN_HUNYAOJIU   FanT = 18 //混幺九
	//========24番========
	FanT_FAN_QIDUI           FanT = 19 //七对
	FanT_FAN_QIXINGBUKAO     FanT = 20 //七星不靠
	FanT_FAN_QUANSHUANGKE    FanT = 21 //全双刻
	FanT_FAN_QINGYISE        FanT = 22 //清一色
	FanT_FAN_YISESANTONGSHUN FanT = 23 //一色三同顺
	FanT_FAN_YISESANJIEGAO   FanT = 24 //一色三节高
	FanT_FAN_QUANDA          FanT = 25 //全大
	FanT_FAN_QUANZHONG       FanT = 26 //全中
	FanT_FAN_QUANXIAO        FanT = 27 //全小
	//========16番========
	FanT_FAN_QINGLONG           FanT = 28 //清龙
	FanT_FAN_SANSESHUANGLONGHUI FanT = 29 //三色双龙会
	FanT_FAN_YISESANBUGAO       FanT = 30 //一色三步高
	FanT_FAN_QUANDAIWU          FanT = 31 //全带五
	FanT_FAN_SANTONGKE          FanT = 32 //三同刻
	FanT_FAN_SANANKE            FanT = 33 //三暗刻
	//========12番========
	FanT_FAN_QUANBUKAO FanT = 34 //全不靠
	FanT_FAN_ZUHELONG  FanT = 35 //组合龙
	FanT_FAN_DAYUWU    FanT = 36 //大于五
	FanT_FAN_XIAOYUWU  FanT = 37 //小于五
	FanT_FAN_SANFENGKE FanT = 38 //三风刻
	//========8番========
	FanT_FAN_HUALONG          FanT = 39 //花龙
	FanT_FAN_TUIBUDAO         FanT = 40 //推不倒
	FanT_FAN_SANSESANTONGSHUN FanT = 41 //三色三同顺
	FanT_FAN_SANSESANJIEGAO   FanT = 42 //三色三节高
	FanT_FAN_WUFANHU          FanT = 43 //无番和
	FanT_FAN_MIAOSHOUHUICHUN  FanT = 44 //妙手回春
	FanT_FAN_HAIDILAOYUE      FanT = 45 //海底捞月
	FanT_FAN_GANGSHANGKAIHUA  FanT = 46 //杠上开花
	FanT_FAN_QIANGGANGHU      FanT = 47 //抢杠和
	//========6番========
	FanT_FAN_PENGPENGHU    FanT = 48 //碰碰和
	FanT_FAN_HUNYISE       FanT = 49 //混一色
	FanT_FAN_SANSESANBUGAO FanT = 50 //三色三步高
	FanT_FAN_WUMENQI       FanT = 51 //五门齐
	FanT_FAN_QUANQIUREN    FanT = 52 //全求人
	FanT_FAN_SHUANGANGANG  FanT = 53 //双暗杠
	FanT_FAN_SHUANGJIANKE  FanT = 54 //双箭刻
	//========4番========
	FanT_FAN_QUANDAIYAO     FanT = 55 //全带幺
	FanT_FAN_BUQIUREN       FanT = 56 //不求人
	FanT_FAN_SHUANGMINGGANG FanT = 57 //双明杠
	FanT_FAN_HUJUEZHANG     FanT = 58 //和绝张
	//========2番========
	FanT_FAN_JIANKE       FanT = 59 //箭刻
	FanT_FAN_QUANFENGKE   FanT = 60 //圈风刻
	FanT_FAN_MENFENGKE    FanT = 61 //门风刻
	FanT_FAN_MENQIANQING  FanT = 62 //门前清
	FanT_FAN_PINGHU       FanT = 63 //平和
	FanT_FAN_SIGUIYI      FanT = 64 //四归一
	FanT_FAN_SHUANGTONGKE FanT = 65 //双同刻
	FanT_FAN_SHUANGANKE   FanT = 66 //双暗刻
	FanT_FAN_ANGANG       FanT = 67 //暗杠
	FanT_FAN_DUANYAO      FanT = 68 //断幺
	//========1番========
	FanT_FAN_YIBANGAO     FanT = 69 //一般高
	FanT_FAN_XIXIANGFENG  FanT = 70 //喜相逢
	FanT_FAN_LIANLIU      FanT = 71 //连六
	FanT_FAN_LAOSHAOFU    FanT = 72 //老少副
	FanT_FAN_YAOJIUKE     FanT = 73 //幺九刻
	FanT_FAN_MINGGANG     FanT = 74 //明杠
	FanT_FAN_QUEYIMEN     FanT = 75 //缺一门
	FanT_FAN_WUZI         FanT = 76 //无字
	FanT_FAN_BIANZHANG    FanT = 77 //边张
	FanT_FAN_KANZHANG     FanT = 78 //坎张
	FanT_FAN_DANDIAOJIANG FanT = 79 //单钓将
	FanT_FAN_ZIMO         FanT = 80 //自摸
	FanT_FAN_HUAPAI       FanT = 81 //花牌
	//========5番========
	FanT_FAN_MINGANGANG FanT = 82 //明暗杠
)

// Enum value maps for FanT.
var (
	FanT_name = map[int32]string{
		0:  "FAN_INVALID",
		1:  "FAN_DASIXI",
		2:  "FAN_DASANYUAN",
		3:  "FAN_LVYISE",
		4:  "FAN_JIULIANBAODENG",
		5:  "FAN_SIGANG",
		6:  "FAN_LIANQIDUI",
		7:  "FAN_SHISANYAO",
		8:  "FAN_QINGYAOJIU",
		9:  "FAN_XIAOSIXI",
		10: "FAN_XIAOSANYUAN",
		11: "FAN_ZIYISE",
		12: "FAN_SIANKE",
		13: "FAN_YISESHUANGLONGHUI",
		14: "FAN_YISESITONGSHUN",
		15: "FAN_YISESIJIEGAO",
		16: "FAN_YISESIBUGAO",
		17: "FAN_SANGANG",
		18: "FAN_HUNYAOJIU",
		19: "FAN_QIDUI",
		20: "FAN_QIXINGBUKAO",
		21: "FAN_QUANSHUANGKE",
		22: "FAN_QINGYISE",
		23: "FAN_YISESANTONGSHUN",
		24: "FAN_YISESANJIEGAO",
		25: "FAN_QUANDA",
		26: "FAN_QUANZHONG",
		27: "FAN_QUANXIAO",
		28: "FAN_QINGLONG",
		29: "FAN_SANSESHUANGLONGHUI",
		30: "FAN_YISESANBUGAO",
		31: "FAN_QUANDAIWU",
		32: "FAN_SANTONGKE",
		33: "FAN_SANANKE",
		34: "FAN_QUANBUKAO",
		35: "FAN_ZUHELONG",
		36: "FAN_DAYUWU",
		37: "FAN_XIAOYUWU",
		38: "FAN_SANFENGKE",
		39: "FAN_HUALONG",
		40: "FAN_TUIBUDAO",
		41: "FAN_SANSESANTONGSHUN",
		42: "FAN_SANSESANJIEGAO",
		43: "FAN_WUFANHU",
		44: "FAN_MIAOSHOUHUICHUN",
		45: "FAN_HAIDILAOYUE",
		46: "FAN_GANGSHANGKAIHUA",
		47: "FAN_QIANGGANGHU",
		48: "FAN_PENGPENGHU",
		49: "FAN_HUNYISE",
		50: "FAN_SANSESANBUGAO",
		51: "FAN_WUMENQI",
		52: "FAN_QUANQIUREN",
		53: "FAN_SHUANGANGANG",
		54: "FAN_SHUANGJIANKE",
		55: "FAN_QUANDAIYAO",
		56: "FAN_BUQIUREN",
		57: "FAN_SHUANGMINGGANG",
		58: "FAN_HUJUEZHANG",
		59: "FAN_JIANKE",
		60: "FAN_QUANFENGKE",
		61: "FAN_MENFENGKE",
		62: "FAN_MENQIANQING",
		63: "FAN_PINGHU",
		64: "FAN_SIGUIYI",
		65: "FAN_SHUANGTONGKE",
		66: "FAN_SHUANGANKE",
		67: "FAN_ANGANG",
		68: "FAN_DUANYAO",
		69: "FAN_YIBANGAO",
		70: "FAN_XIXIANGFENG",
		71: "FAN_LIANLIU",
		72: "FAN_LAOSHAOFU",
		73: "FAN_YAOJIUKE",
		74: "FAN_MINGGANG",
		75: "FAN_QUEYIMEN",
		76: "FAN_WUZI",
		77: "FAN_BIANZHANG",
		78: "FAN_KANZHANG",
		79: "FAN_DANDIAOJIANG",
		80: "FAN_ZIMO",
		81: "FAN_HUAPAI",
		82: "FAN_MINGANGANG",
	}
	FanT_value = map[string]int32{
		"FAN_INVALID":            0,
		"FAN_DASIXI":             1,
		"FAN_DASANYUAN":          2,
		"FAN_LVYISE":             3,
		"FAN_JIULIANBAODENG":     4,
		"FAN_SIGANG":             5,
		"FAN_LIANQIDUI":          6,
		"FAN_SHISANYAO":          7,
		"FAN_QINGYAOJIU":         8,
		"FAN_XIAOSIXI":           9,
		"FAN_XIAOSANYUAN":        10,
		"FAN_ZIYISE":             11,
		"FAN_SIANKE":             12,
		"FAN_YISESHUANGLONGHUI":  13,
		"FAN_YISESITONGSHUN":     14,
		"FAN_YISESIJIEGAO":       15,
		"FAN_YISESIBUGAO":        16,
		"FAN_SANGANG":            17,
		"FAN_HUNYAOJIU":          18,
		"FAN_QIDUI":              19,
		"FAN_QIXINGBUKAO":        20,
		"FAN_QUANSHUANGKE":       21,
		"FAN_QINGYISE":           22,
		"FAN_YISESANTONGSHUN":    23,
		"FAN_YISESANJIEGAO":      24,
		"FAN_QUANDA":             25,
		"FAN_QUANZHONG":          26,
		"FAN_QUANXIAO":           27,
		"FAN_QINGLONG":           28,
		"FAN_SANSESHUANGLONGHUI": 29,
		"FAN_YISESANBUGAO":       30,
		"FAN_QUANDAIWU":          31,
		"FAN_SANTONGKE":          32,
		"FAN_SANANKE":            33,
		"FAN_QUANBUKAO":          34,
		"FAN_ZUHELONG":           35,
		"FAN_DAYUWU":             36,
		"FAN_XIAOYUWU":           37,
		"FAN_SANFENGKE":          38,
		"FAN_HUALONG":            39,
		"FAN_TUIBUDAO":           40,
		"FAN_SANSESANTONGSHUN":   41,
		"FAN_SANSESANJIEGAO":     42,
		"FAN_WUFANHU":            43,
		"FAN_MIAOSHOUHUICHUN":    44,
		"FAN_HAIDILAOYUE":        45,
		"FAN_GANGSHANGKAIHUA":    46,
		"FAN_QIANGGANGHU":        47,
		"FAN_PENGPENGHU":         48,
		"FAN_HUNYISE":            49,
		"FAN_SANSESANBUGAO":      50,
		"FAN_WUMENQI":            51,
		"FAN_QUANQIUREN":         52,
		"FAN_SHUANGANGANG":       53,
		"FAN_SHUANGJIANKE":       54,
		"FAN_QUANDAIYAO":         55,
		"FAN_BUQIUREN":           56,
		"FAN_SHUANGMINGGANG":     57,
		"FAN_HUJUEZHANG":         58,
		"FAN_JIANKE":             59,
		"FAN_QUANFENGKE":         60,
		"FAN_MENFENGKE":          61,
		"FAN_MENQIANQING":        62,
		"FAN_PINGHU":             63,
		"FAN_SIGUIYI":            64,
		"FAN_SHUANGTONGKE":       65,
		"FAN_SHUANGANKE":         66,
		"FAN_ANGANG":             67,
		"FAN_DUANYAO":            68,
		"FAN_YIBANGAO":           69,
		"FAN_XIXIANGFENG":        70,
		"FAN_LIANLIU":            71,
		"FAN_LAOSHAOFU":          72,
		"FAN_YAOJIUKE":           73,
		"FAN_MINGGANG":           74,
		"FAN_QUEYIMEN":           75,
		"FAN_WUZI":               76,
		"FAN_BIANZHANG":          77,
		"FAN_KANZHANG":           78,
		"FAN_DANDIAOJIANG":       79,
		"FAN_ZIMO":               80,
		"FAN_HUAPAI":             81,
		"FAN_MINGANGANG":         82,
	}
)

func (x FanT) Enum() *FanT {
	p := new(FanT)
	*p = x
	return p
}

func (x FanT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FanT) Descriptor() protoreflect.EnumDescriptor {
	return file_mahjong_proto_enumTypes[0].Descriptor()
}

func (FanT) Type() protoreflect.EnumType {
	return &file_mahjong_proto_enumTypes[0]
}

func (x FanT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FanT.Descriptor instead.
func (FanT) EnumDescriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{0}
}

// kindID 3002
////////////////////牌值定义/////////////////////////////
//		1 ~ 9 : 一万 ~ 9万
//		11 ~ 19 : 一条 ~ 9条
//		21 ~ 29 : 一筒 ~ 9筒
//		31 ~ 34 : 东、南、西、北风
//		41 : 发财
//		42 : 红中
//		43 : 白板
//		51 ~ 54 : 春夏秋冬
//		61 ~ 64 : 四种花色(梅兰竹菊)
/////////////////////玩家座位//////////////////////////////
//        骰子方位转换(弃用)
//    东 : 1,5,9  代表东
//    南 : 2,6,10 代表南
//    西 : 3,7,11 代表西
//    北 : 4,8,12 代表北
//    通过摸东、南、西、北风决定方位
/////////////////////风圈解义//////////////////////////////
// 一场麻将里有4个风圈（第一圈为东风圈、第二圈为南风圈、第三圈为西风圈、第四圈为北风圈）
// 每个风圈里有4局（第一局为东风局、第二局为南风局、第三局为西风局、第四局为北风局）
// 国标麻将，轮流坐庄，没有连续坐庄一说。
/////////////////////门风解义//////////////////////////////
// 门前发牌的那一家,门风为东，然后依照逆时钟方向计算
/////////////////////番型解义(请看文件末部)///////////////////
//刻子
type MahjongKeZi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []int32   `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`
	Code  MJOperate `protobuf:"varint,2,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"`
	ByUid uint64    `protobuf:"varint,3,opt,name=ByUid,proto3" json:"ByUid,omitempty"` // 由谁提供
}

func (x *MahjongKeZi) Reset() {
	*x = MahjongKeZi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongKeZi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongKeZi) ProtoMessage() {}

func (x *MahjongKeZi) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongKeZi.ProtoReflect.Descriptor instead.
func (*MahjongKeZi) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{0}
}

func (x *MahjongKeZi) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MahjongKeZi) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongKeZi) GetByUid() uint64 {
	if x != nil {
		return x.ByUid
	}
	return 0
}

//提示
type MahjongHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  MJOperate `protobuf:"varint,1,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码
	Cards []int32   `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 听哪几张牌| 胡牌和自摸皆为一张
	ByUid uint64    `protobuf:"varint,3,opt,name=ByUid,proto3" json:"ByUid,omitempty"`                 // 由谁提供
}

func (x *MahjongHint) Reset() {
	*x = MahjongHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongHint) ProtoMessage() {}

func (x *MahjongHint) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongHint.ProtoReflect.Descriptor instead.
func (*MahjongHint) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{1}
}

func (x *MahjongHint) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongHint) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MahjongHint) GetByUid() uint64 {
	if x != nil {
		return x.ByUid
	}
	return 0
}

//麻将玩家信息
type MahjongPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyInfo     *PlayerInfo    `protobuf:"bytes,1,opt,name=MyInfo,proto3" json:"MyInfo,omitempty"`                       //
	HandCards  []int32        `protobuf:"varint,2,rep,packed,name=HandCards,proto3" json:"HandCards,omitempty"`         //手牌
	KeZiCards  []*MahjongKeZi `protobuf:"bytes,3,rep,name=KeZiCards,proto3" json:"KeZiCards,omitempty"`                 // 吃牌 桌牌:明在桌面上的牌,即碰、吃、杠后的牌
	TableCards []int32        `protobuf:"varint,4,rep,packed,name=TableCards,proto3" json:"TableCards,omitempty"`       //玩家的桌面牌值
	IsTing     bool           `protobuf:"varint,5,opt,name=IsTing,proto3" json:"IsTing,omitempty"`                      //是否听牌
	GainScore  int64          `protobuf:"varint,6,opt,name=GainScore,proto3" json:"GainScore,omitempty"`                //输赢分值
	TotalScore int64          `protobuf:"varint,7,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`              //总积分(当不为系统房时,该分值可以为负分)
	MenFeng    Direct         `protobuf:"varint,8,opt,name=MenFeng,proto3,enum=go.Direct" json:"MenFeng,omitempty"`     //门风(庄家==东风)
	SitDirect  Direct         `protobuf:"varint,9,opt,name=SitDirect,proto3,enum=go.Direct" json:"SitDirect,omitempty"` //座位方位
	OpHints    []*MahjongHint `protobuf:"bytes,10,rep,name=OpHints,proto3" json:"OpHints,omitempty"`                    //玩家可操作(恢复场景)
}

func (x *MahjongPlayer) Reset() {
	*x = MahjongPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongPlayer) ProtoMessage() {}

func (x *MahjongPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongPlayer.ProtoReflect.Descriptor instead.
func (*MahjongPlayer) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{2}
}

func (x *MahjongPlayer) GetMyInfo() *PlayerInfo {
	if x != nil {
		return x.MyInfo
	}
	return nil
}

func (x *MahjongPlayer) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *MahjongPlayer) GetKeZiCards() []*MahjongKeZi {
	if x != nil {
		return x.KeZiCards
	}
	return nil
}

func (x *MahjongPlayer) GetTableCards() []int32 {
	if x != nil {
		return x.TableCards
	}
	return nil
}

func (x *MahjongPlayer) GetIsTing() bool {
	if x != nil {
		return x.IsTing
	}
	return false
}

func (x *MahjongPlayer) GetGainScore() int64 {
	if x != nil {
		return x.GainScore
	}
	return 0
}

func (x *MahjongPlayer) GetTotalScore() int64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *MahjongPlayer) GetMenFeng() Direct {
	if x != nil {
		return x.MenFeng
	}
	return Direct_Centre
}

func (x *MahjongPlayer) GetSitDirect() Direct {
	if x != nil {
		return x.SitDirect
	}
	return Direct_Centre
}

func (x *MahjongPlayer) GetOpHints() []*MahjongHint {
	if x != nil {
		return x.OpHints
	}
	return nil
}

//入场
type EnterGameMJResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID   uint64         `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`     //游戏标识
	ChairNum uint32         `protobuf:"varint,2,opt,name=ChairNum,proto3" json:"ChairNum,omitempty"` //椅子编号(不满足req的此项时,将由系统分配,并返回提示)
	Player   *MahjongPlayer `protobuf:"bytes,3,opt,name=Player,proto3" json:"Player,omitempty"`
}

func (x *EnterGameMJResp) Reset() {
	*x = EnterGameMJResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterGameMJResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterGameMJResp) ProtoMessage() {}

func (x *EnterGameMJResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterGameMJResp.ProtoReflect.Descriptor instead.
func (*EnterGameMJResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{3}
}

func (x *EnterGameMJResp) GetGameID() uint64 {
	if x != nil {
		return x.GameID
	}
	return 0
}

func (x *EnterGameMJResp) GetChairNum() uint32 {
	if x != nil {
		return x.ChairNum
	}
	return 0
}

func (x *EnterGameMJResp) GetPlayer() *MahjongPlayer {
	if x != nil {
		return x.Player
	}
	return nil
}

//场景
type MahjongSceneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp   int64            `protobuf:"varint,1,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`              // 时间戳
	RunCount    int32            `protobuf:"varint,2,opt,name=RunCount,proto3" json:"RunCount,omitempty"`                // 当前局数
	RemainCount int32            `protobuf:"varint,3,opt,name=RemainCount,proto3" json:"RemainCount,omitempty"`          // 剩余张数
	BankerID    uint64           `protobuf:"varint,4,opt,name=BankerID,proto3" json:"BankerID,omitempty"`                // 庄家ID
	CurrentID   uint64           `protobuf:"varint,5,opt,name=CurrentID,proto3" json:"CurrentID,omitempty"`              // 当前玩家ID
	Inning      string           `protobuf:"bytes,6,opt,name=Inning,proto3" json:"Inning,omitempty"`                     // 牌局号
	HuCard      int32            `protobuf:"varint,7,opt,name=HuCard,proto3" json:"HuCard,omitempty"`                    // 胡牌,或自摸时的摸起的最后一张
	QuanFeng    Direct           `protobuf:"varint,8,opt,name=QuanFeng,proto3,enum=go.Direct" json:"QuanFeng,omitempty"` // 当前局的圈风
	StartPos    int32            `protobuf:"varint,9,opt,name=StartPos,proto3" json:"StartPos,omitempty"`                // 抓牌起始位置(即保留不抓取的牌墙)
	AllPlayers  []*MahjongPlayer `protobuf:"bytes,10,rep,name=AllPlayers,proto3" json:"AllPlayers,omitempty"`            //玩家列表(吃碰杠)
}

func (x *MahjongSceneResp) Reset() {
	*x = MahjongSceneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSceneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSceneResp) ProtoMessage() {}

func (x *MahjongSceneResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSceneResp.ProtoReflect.Descriptor instead.
func (*MahjongSceneResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{4}
}

func (x *MahjongSceneResp) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *MahjongSceneResp) GetRunCount() int32 {
	if x != nil {
		return x.RunCount
	}
	return 0
}

func (x *MahjongSceneResp) GetRemainCount() int32 {
	if x != nil {
		return x.RemainCount
	}
	return 0
}

func (x *MahjongSceneResp) GetBankerID() uint64 {
	if x != nil {
		return x.BankerID
	}
	return 0
}

func (x *MahjongSceneResp) GetCurrentID() uint64 {
	if x != nil {
		return x.CurrentID
	}
	return 0
}

func (x *MahjongSceneResp) GetInning() string {
	if x != nil {
		return x.Inning
	}
	return ""
}

func (x *MahjongSceneResp) GetHuCard() int32 {
	if x != nil {
		return x.HuCard
	}
	return 0
}

func (x *MahjongSceneResp) GetQuanFeng() Direct {
	if x != nil {
		return x.QuanFeng
	}
	return Direct_Centre
}

func (x *MahjongSceneResp) GetStartPos() int32 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

func (x *MahjongSceneResp) GetAllPlayers() []*MahjongPlayer {
	if x != nil {
		return x.AllPlayers
	}
	return nil
}

//状态
// 服务端推送
//(空闲 - Free)
type MahjongStateFreeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times  *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	Inning string    `protobuf:"bytes,2,opt,name=Inning,proto3" json:"Inning,omitempty"` // 牌局号
}

func (x *MahjongStateFreeResp) Reset() {
	*x = MahjongStateFreeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongStateFreeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongStateFreeResp) ProtoMessage() {}

func (x *MahjongStateFreeResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongStateFreeResp.ProtoReflect.Descriptor instead.
func (*MahjongStateFreeResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{5}
}

func (x *MahjongStateFreeResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongStateFreeResp) GetInning() string {
	if x != nil {
		return x.Inning
	}
	return ""
}

//方位 - Direct (调整座位:仅在第一局开始需决定所座方位,或座位替换新玩家)
type MahjongStateDirectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times    *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	MyDirect Direct    `protobuf:"varint,2,opt,name=MyDirect,proto3,enum=go.Direct" json:"MyDirect,omitempty"` //东南西北(系统决定)
}

func (x *MahjongStateDirectResp) Reset() {
	*x = MahjongStateDirectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongStateDirectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongStateDirectResp) ProtoMessage() {}

func (x *MahjongStateDirectResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongStateDirectResp.ProtoReflect.Descriptor instead.
func (*MahjongStateDirectResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{6}
}

func (x *MahjongStateDirectResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongStateDirectResp) GetMyDirect() Direct {
	if x != nil {
		return x.MyDirect
	}
	return Direct_Centre
}

//定庄 - Decide 系统定庄
type MahjongStateDecideResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times    *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	BankerID uint64    `protobuf:"varint,2,opt,name=BankerID,proto3" json:"BankerID,omitempty"`                // 首局默认座位东方的为庄家
	QuanFeng Direct    `protobuf:"varint,3,opt,name=QuanFeng,proto3,enum=go.Direct" json:"QuanFeng,omitempty"` // 当前局的圈风
	MenFeng  Direct    `protobuf:"varint,4,opt,name=MenFeng,proto3,enum=go.Direct" json:"MenFeng,omitempty"`   // 玩家的门风
}

func (x *MahjongStateDecideResp) Reset() {
	*x = MahjongStateDecideResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongStateDecideResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongStateDecideResp) ProtoMessage() {}

func (x *MahjongStateDecideResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongStateDecideResp.ProtoReflect.Descriptor instead.
func (*MahjongStateDecideResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{7}
}

func (x *MahjongStateDecideResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongStateDecideResp) GetBankerID() uint64 {
	if x != nil {
		return x.BankerID
	}
	return 0
}

func (x *MahjongStateDecideResp) GetQuanFeng() Direct {
	if x != nil {
		return x.QuanFeng
	}
	return Direct_Centre
}

func (x *MahjongStateDecideResp) GetMenFeng() Direct {
	if x != nil {
		return x.MenFeng
	}
	return Direct_Centre
}

//开始掷骰子 - RollDice 注:决定牌堆的起始位置
type MahjongStateRollDiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongStateRollDiceResp) Reset() {
	*x = MahjongStateRollDiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongStateRollDiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongStateRollDiceResp) ProtoMessage() {}

func (x *MahjongStateRollDiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongStateRollDiceResp.ProtoReflect.Descriptor instead.
func (*MahjongStateRollDiceResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{8}
}

func (x *MahjongStateRollDiceResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//(开始游戏) - Start
type MahjongStateStartResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times    *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	StartPos int32     `protobuf:"varint,2,opt,name=StartPos,proto3" json:"StartPos,omitempty"` //抓牌起始位置(即保留不抓取的牌墙)
}

func (x *MahjongStateStartResp) Reset() {
	*x = MahjongStateStartResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongStateStartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongStateStartResp) ProtoMessage() {}

func (x *MahjongStateStartResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongStateStartResp.ProtoReflect.Descriptor instead.
func (*MahjongStateStartResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{9}
}

func (x *MahjongStateStartResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongStateStartResp) GetStartPos() int32 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

//(游戏中) - Playing
type MahjongStatePlayingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times  *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	UserID uint64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"` // 轮到谁
	Card   int32     `protobuf:"varint,3,opt,name=Card,proto3" json:"Card,omitempty"`     // 只有UserID的玩家有牌值
}

func (x *MahjongStatePlayingResp) Reset() {
	*x = MahjongStatePlayingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongStatePlayingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongStatePlayingResp) ProtoMessage() {}

func (x *MahjongStatePlayingResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongStatePlayingResp.ProtoReflect.Descriptor instead.
func (*MahjongStatePlayingResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{10}
}

func (x *MahjongStatePlayingResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongStatePlayingResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongStatePlayingResp) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

//等待操作(仅对有提示的玩家提供)
type MahjongStateWaitOperateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongStateWaitOperateResp) Reset() {
	*x = MahjongStateWaitOperateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongStateWaitOperateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongStateWaitOperateResp) ProtoMessage() {}

func (x *MahjongStateWaitOperateResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongStateWaitOperateResp.ProtoReflect.Descriptor instead.
func (*MahjongStateWaitOperateResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{11}
}

func (x *MahjongStateWaitOperateResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//(开奖) - Opening
type MahjongStateOpenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times      *TimeInfo        `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	IsFlow     bool             `protobuf:"varint,2,opt,name=IsFlow,proto3" json:"IsFlow,omitempty"`        // 是否流局
	HuCard     int32            `protobuf:"varint,3,opt,name=HuCard,proto3" json:"HuCard,omitempty"`        // 胡牌,或自摸时的摸起的最后一张
	WinnerID   uint64           `protobuf:"varint,4,opt,name=WinnerID,proto3" json:"WinnerID,omitempty"`    //胜利者ID（流局时为0）
	Fans       []byte           `protobuf:"bytes,5,opt,name=Fans,proto3" json:"Fans,omitempty"`             //番型列表 每个元素对应一个番型
	FanCount   int32            `protobuf:"varint,6,opt,name=FanCount,proto3" json:"FanCount,omitempty"`    //共计番数
	AllPlayers []*MahjongPlayer `protobuf:"bytes,7,rep,name=AllPlayers,proto3" json:"AllPlayers,omitempty"` //所有玩家得分
}

func (x *MahjongStateOpenResp) Reset() {
	*x = MahjongStateOpenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongStateOpenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongStateOpenResp) ProtoMessage() {}

func (x *MahjongStateOpenResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongStateOpenResp.ProtoReflect.Descriptor instead.
func (*MahjongStateOpenResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{12}
}

func (x *MahjongStateOpenResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongStateOpenResp) GetIsFlow() bool {
	if x != nil {
		return x.IsFlow
	}
	return false
}

func (x *MahjongStateOpenResp) GetHuCard() int32 {
	if x != nil {
		return x.HuCard
	}
	return 0
}

func (x *MahjongStateOpenResp) GetWinnerID() uint64 {
	if x != nil {
		return x.WinnerID
	}
	return 0
}

func (x *MahjongStateOpenResp) GetFans() []byte {
	if x != nil {
		return x.Fans
	}
	return nil
}

func (x *MahjongStateOpenResp) GetFanCount() int32 {
	if x != nil {
		return x.FanCount
	}
	return 0
}

func (x *MahjongStateOpenResp) GetAllPlayers() []*MahjongPlayer {
	if x != nil {
		return x.AllPlayers
	}
	return nil
}

//(结束) - Over
type MahjongStateOverResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongStateOverResp) Reset() {
	*x = MahjongStateOverResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongStateOverResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongStateOverResp) ProtoMessage() {}

func (x *MahjongStateOverResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongStateOverResp.ProtoReflect.Descriptor instead.
func (*MahjongStateOverResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{13}
}

func (x *MahjongStateOverResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//////////////////////////////////////////////
//准备
type MahjongReadyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReady bool `protobuf:"varint,1,opt,name=IsReady,proto3" json:"IsReady,omitempty"` // 玩家准备，可以取消准备
}

func (x *MahjongReadyReq) Reset() {
	*x = MahjongReadyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongReadyReq) ProtoMessage() {}

func (x *MahjongReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongReadyReq.ProtoReflect.Descriptor instead.
func (*MahjongReadyReq) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{14}
}

func (x *MahjongReadyReq) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

type MahjongReadyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IsReady bool   `protobuf:"varint,2,opt,name=IsReady,proto3" json:"IsReady,omitempty"` // 玩家准备，可以取消准备
}

func (x *MahjongReadyResp) Reset() {
	*x = MahjongReadyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongReadyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongReadyResp) ProtoMessage() {}

func (x *MahjongReadyResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongReadyResp.ProtoReflect.Descriptor instead.
func (*MahjongReadyResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{15}
}

func (x *MahjongReadyResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongReadyResp) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

//
//庄家扔骰子
type MahjongRollReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongRollReq) Reset() {
	*x = MahjongRollReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongRollReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongRollReq) ProtoMessage() {}

func (x *MahjongRollReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongRollReq.ProtoReflect.Descriptor instead.
func (*MahjongRollReq) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{16}
}

type MahjongRollResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Dice   []byte `protobuf:"bytes,2,opt,name=Dice,proto3" json:"Dice,omitempty"` //骰子决定,起抓牌位置
}

func (x *MahjongRollResp) Reset() {
	*x = MahjongRollResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongRollResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongRollResp) ProtoMessage() {}

func (x *MahjongRollResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongRollResp.ProtoReflect.Descriptor instead.
func (*MahjongRollResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{17}
}

func (x *MahjongRollResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongRollResp) GetDice() []byte {
	if x != nil {
		return x.Dice
	}
	return nil
}

// 玩家打出去的牌
type MahjongOutCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card int32 `protobuf:"varint,1,opt,name=Card,proto3" json:"Card,omitempty"` //
}

func (x *MahjongOutCardReq) Reset() {
	*x = MahjongOutCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongOutCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongOutCardReq) ProtoMessage() {}

func (x *MahjongOutCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongOutCardReq.ProtoReflect.Descriptor instead.
func (*MahjongOutCardReq) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{18}
}

func (x *MahjongOutCardReq) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

type MahjongOutCardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"` // 玩家ID
	Card   int32  `protobuf:"varint,2,opt,name=Card,proto3" json:"Card,omitempty"`     //
}

func (x *MahjongOutCardResp) Reset() {
	*x = MahjongOutCardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongOutCardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongOutCardResp) ProtoMessage() {}

func (x *MahjongOutCardResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongOutCardResp.ProtoReflect.Descriptor instead.
func (*MahjongOutCardResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{19}
}

func (x *MahjongOutCardResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongOutCardResp) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

// 操作
type MahjongOperateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  MJOperate `protobuf:"varint,1,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码 pass表示弃牌
	Cards []int32   `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 吃|碰|杠 时的手牌
}

func (x *MahjongOperateReq) Reset() {
	*x = MahjongOperateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongOperateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongOperateReq) ProtoMessage() {}

func (x *MahjongOperateReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongOperateReq.ProtoReflect.Descriptor instead.
func (*MahjongOperateReq) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{20}
}

func (x *MahjongOperateReq) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongOperateReq) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

type MahjongOperateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`               // 玩家ID
	Code   MJOperate `protobuf:"varint,2,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码
	Cards  []int32   `protobuf:"varint,3,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 吃|碰|杠 时的组合牌
}

func (x *MahjongOperateResp) Reset() {
	*x = MahjongOperateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongOperateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongOperateResp) ProtoMessage() {}

func (x *MahjongOperateResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongOperateResp.ProtoReflect.Descriptor instead.
func (*MahjongOperateResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{21}
}

func (x *MahjongOperateResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongOperateResp) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongOperateResp) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

////////////////////////////////
//
//发牌
type MahjongDealResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    uint64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`              // 玩家ID
	CurPos    int32   `protobuf:"varint,2,opt,name=CurPos,proto3" json:"CurPos,omitempty"`              // 抓牌起始位置
	HandCards []int32 `protobuf:"varint,3,rep,packed,name=HandCards,proto3" json:"HandCards,omitempty"` // 玩家的手牌(座位上的玩家才有,且只能拿到自己的牌值)
}

func (x *MahjongDealResp) Reset() {
	*x = MahjongDealResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongDealResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongDealResp) ProtoMessage() {}

func (x *MahjongDealResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongDealResp.ProtoReflect.Descriptor instead.
func (*MahjongDealResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{22}
}

func (x *MahjongDealResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongDealResp) GetCurPos() int32 {
	if x != nil {
		return x.CurPos
	}
	return 0
}

func (x *MahjongDealResp) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

//
// 玩家只能收到自己的
type MahjongHintResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64         `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"` // 玩家ID
	Hints  []*MahjongHint `protobuf:"bytes,2,rep,name=Hints,proto3" json:"Hints,omitempty"`    //提示 注意:吃牌时,有多种组合 cards仅提供玩家手牌牌值
}

func (x *MahjongHintResp) Reset() {
	*x = MahjongHintResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjong_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongHintResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongHintResp) ProtoMessage() {}

func (x *MahjongHintResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjong_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongHintResp.ProtoReflect.Descriptor instead.
func (*MahjongHintResp) Descriptor() ([]byte, []int) {
	return file_mahjong_proto_rawDescGZIP(), []int{23}
}

func (x *MahjongHintResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongHintResp) GetHints() []*MahjongHint {
	if x != nil {
		return x.Hints
	}
	return nil
}

var File_mahjong_proto protoreflect.FileDescriptor

var file_mahjong_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x67, 0x6f, 0x1a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x0b, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x4b, 0x65,
	0x5a, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x42,
	0x79, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x42, 0x79, 0x55, 0x69,
	0x64, 0x22, 0x5c, 0x0a, 0x0b, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x48, 0x69, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x55,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x42, 0x79, 0x55, 0x69, 0x64, 0x22,
	0xf5, 0x02, 0x0a, 0x0d, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x06, 0x4d, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x4d, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x48, 0x61,
	0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x4b, 0x65, 0x5a, 0x69, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x2e,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x4b, 0x65, 0x5a, 0x69, 0x52, 0x09, 0x4b, 0x65, 0x5a,
	0x69, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x54, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x54, 0x69, 0x6e, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x47, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x47, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x07,
	0x4d, 0x65, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x07, 0x4d, 0x65, 0x6e, 0x46, 0x65,
	0x6e, 0x67, 0x12, 0x28, 0x0a, 0x09, 0x53, 0x69, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x52, 0x09, 0x53, 0x69, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x07,
	0x4f, 0x70, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x07,
	0x4f, 0x70, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x70, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x4a, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x29,
	0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xcf, 0x02, 0x0a, 0x10, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x42, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x48, 0x75, 0x43, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x75,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x46, 0x65, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x0a, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x52, 0x0a, 0x14, 0x4d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22,
	0x64, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x08, 0x4d, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x08, 0x4d, 0x79, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x08,
	0x51, 0x75, 0x61, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x6e, 0x46,
	0x65, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x07, 0x4d, 0x65, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x22, 0x3e,
	0x0a, 0x18, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x6c, 0x44, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x57,
	0x0a, 0x15, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x22, 0x69, 0x0a, 0x17, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61,
	0x72, 0x64, 0x22, 0x41, 0x0a, 0x1b, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22,
	0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x75,
	0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x75, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x46, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x46, 0x61,
	0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x22, 0x3a, 0x0a, 0x14, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x2b, 0x0a,
	0x0f, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x44, 0x0a, 0x10, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x22, 0x10, 0x0a, 0x0e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x22, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x52, 0x6f, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x44, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x69, 0x63,
	0x65, 0x22, 0x27, 0x0a, 0x11, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x22, 0x40, 0x0a, 0x12, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x22, 0x4c, 0x0a, 0x11,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x65, 0x0a, 0x12, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x22, 0x5f, 0x0a, 0x0f, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x43, 0x75, 0x72, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x75,
	0x72, 0x50, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x22, 0x50, 0x0a, 0x0f, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x48, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x25, 0x0a,
	0x05, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67,
	0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x48,
	0x69, 0x6e, 0x74, 0x73, 0x2a, 0xd1, 0x0c, 0x0a, 0x05, 0x46, 0x61, 0x6e, 0x5f, 0x74, 0x12, 0x0f,
	0x0a, 0x0b, 0x46, 0x41, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x4e, 0x5f, 0x44, 0x41, 0x53, 0x49, 0x58, 0x49, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x41, 0x4e, 0x5f, 0x44, 0x41, 0x53, 0x41, 0x4e, 0x59, 0x55, 0x41, 0x4e,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x4e, 0x5f, 0x4c, 0x56, 0x59, 0x49, 0x53, 0x45,
	0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x4e, 0x5f, 0x4a, 0x49, 0x55, 0x4c, 0x49, 0x41,
	0x4e, 0x42, 0x41, 0x4f, 0x44, 0x45, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41,
	0x4e, 0x5f, 0x53, 0x49, 0x47, 0x41, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41,
	0x4e, 0x5f, 0x4c, 0x49, 0x41, 0x4e, 0x51, 0x49, 0x44, 0x55, 0x49, 0x10, 0x06, 0x12, 0x11, 0x0a,
	0x0d, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x48, 0x49, 0x53, 0x41, 0x4e, 0x59, 0x41, 0x4f, 0x10, 0x07,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4e, 0x5f, 0x51, 0x49, 0x4e, 0x47, 0x59, 0x41, 0x4f, 0x4a,
	0x49, 0x55, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x4e, 0x5f, 0x58, 0x49, 0x41, 0x4f,
	0x53, 0x49, 0x58, 0x49, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x4e, 0x5f, 0x58, 0x49,
	0x41, 0x4f, 0x53, 0x41, 0x4e, 0x59, 0x55, 0x41, 0x4e, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x46,
	0x41, 0x4e, 0x5f, 0x5a, 0x49, 0x59, 0x49, 0x53, 0x45, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x46,
	0x41, 0x4e, 0x5f, 0x53, 0x49, 0x41, 0x4e, 0x4b, 0x45, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x41, 0x4e, 0x5f, 0x59, 0x49, 0x53, 0x45, 0x53, 0x48, 0x55, 0x41, 0x4e, 0x47, 0x4c, 0x4f, 0x4e,
	0x47, 0x48, 0x55, 0x49, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x4e, 0x5f, 0x59, 0x49,
	0x53, 0x45, 0x53, 0x49, 0x54, 0x4f, 0x4e, 0x47, 0x53, 0x48, 0x55, 0x4e, 0x10, 0x0e, 0x12, 0x14,
	0x0a, 0x10, 0x46, 0x41, 0x4e, 0x5f, 0x59, 0x49, 0x53, 0x45, 0x53, 0x49, 0x4a, 0x49, 0x45, 0x47,
	0x41, 0x4f, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x4e, 0x5f, 0x59, 0x49, 0x53, 0x45,
	0x53, 0x49, 0x42, 0x55, 0x47, 0x41, 0x4f, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4e,
	0x5f, 0x53, 0x41, 0x4e, 0x47, 0x41, 0x4e, 0x47, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41,
	0x4e, 0x5f, 0x48, 0x55, 0x4e, 0x59, 0x41, 0x4f, 0x4a, 0x49, 0x55, 0x10, 0x12, 0x12, 0x0d, 0x0a,
	0x09, 0x46, 0x41, 0x4e, 0x5f, 0x51, 0x49, 0x44, 0x55, 0x49, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x41, 0x4e, 0x5f, 0x51, 0x49, 0x58, 0x49, 0x4e, 0x47, 0x42, 0x55, 0x4b, 0x41, 0x4f, 0x10,
	0x14, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x53, 0x48, 0x55,
	0x41, 0x4e, 0x47, 0x4b, 0x45, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x4e, 0x5f, 0x51,
	0x49, 0x4e, 0x47, 0x59, 0x49, 0x53, 0x45, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x4e,
	0x5f, 0x59, 0x49, 0x53, 0x45, 0x53, 0x41, 0x4e, 0x54, 0x4f, 0x4e, 0x47, 0x53, 0x48, 0x55, 0x4e,
	0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x4e, 0x5f, 0x59, 0x49, 0x53, 0x45, 0x53, 0x41,
	0x4e, 0x4a, 0x49, 0x45, 0x47, 0x41, 0x4f, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x4e,
	0x5f, 0x51, 0x55, 0x41, 0x4e, 0x44, 0x41, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x4e,
	0x5f, 0x51, 0x55, 0x41, 0x4e, 0x5a, 0x48, 0x4f, 0x4e, 0x47, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x41, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x58, 0x49, 0x41, 0x4f, 0x10, 0x1b, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x41, 0x4e, 0x5f, 0x51, 0x49, 0x4e, 0x47, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x1c,
	0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x41, 0x4e, 0x53, 0x45, 0x53, 0x48, 0x55,
	0x41, 0x4e, 0x47, 0x4c, 0x4f, 0x4e, 0x47, 0x48, 0x55, 0x49, 0x10, 0x1d, 0x12, 0x14, 0x0a, 0x10,
	0x46, 0x41, 0x4e, 0x5f, 0x59, 0x49, 0x53, 0x45, 0x53, 0x41, 0x4e, 0x42, 0x55, 0x47, 0x41, 0x4f,
	0x10, 0x1e, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x44, 0x41,
	0x49, 0x57, 0x55, 0x10, 0x1f, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x41, 0x4e,
	0x54, 0x4f, 0x4e, 0x47, 0x4b, 0x45, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4e, 0x5f,
	0x53, 0x41, 0x4e, 0x41, 0x4e, 0x4b, 0x45, 0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x4e,
	0x5f, 0x51, 0x55, 0x41, 0x4e, 0x42, 0x55, 0x4b, 0x41, 0x4f, 0x10, 0x22, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x41, 0x4e, 0x5f, 0x5a, 0x55, 0x48, 0x45, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x23, 0x12, 0x0e,
	0x0a, 0x0a, 0x46, 0x41, 0x4e, 0x5f, 0x44, 0x41, 0x59, 0x55, 0x57, 0x55, 0x10, 0x24, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x41, 0x4e, 0x5f, 0x58, 0x49, 0x41, 0x4f, 0x59, 0x55, 0x57, 0x55, 0x10, 0x25,
	0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x41, 0x4e, 0x46, 0x45, 0x4e, 0x47, 0x4b,
	0x45, 0x10, 0x26, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4e, 0x5f, 0x48, 0x55, 0x41, 0x4c, 0x4f,
	0x4e, 0x47, 0x10, 0x27, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x4e, 0x5f, 0x54, 0x55, 0x49, 0x42,
	0x55, 0x44, 0x41, 0x4f, 0x10, 0x28, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x41,
	0x4e, 0x53, 0x45, 0x53, 0x41, 0x4e, 0x54, 0x4f, 0x4e, 0x47, 0x53, 0x48, 0x55, 0x4e, 0x10, 0x29,
	0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x41, 0x4e, 0x53, 0x45, 0x53, 0x41, 0x4e,
	0x4a, 0x49, 0x45, 0x47, 0x41, 0x4f, 0x10, 0x2a, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4e, 0x5f,
	0x57, 0x55, 0x46, 0x41, 0x4e, 0x48, 0x55, 0x10, 0x2b, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x4e,
	0x5f, 0x4d, 0x49, 0x41, 0x4f, 0x53, 0x48, 0x4f, 0x55, 0x48, 0x55, 0x49, 0x43, 0x48, 0x55, 0x4e,
	0x10, 0x2c, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x4e, 0x5f, 0x48, 0x41, 0x49, 0x44, 0x49, 0x4c,
	0x41, 0x4f, 0x59, 0x55, 0x45, 0x10, 0x2d, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x4e, 0x5f, 0x47,
	0x41, 0x4e, 0x47, 0x53, 0x48, 0x41, 0x4e, 0x47, 0x4b, 0x41, 0x49, 0x48, 0x55, 0x41, 0x10, 0x2e,
	0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x4e, 0x5f, 0x51, 0x49, 0x41, 0x4e, 0x47, 0x47, 0x41, 0x4e,
	0x47, 0x48, 0x55, 0x10, 0x2f, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4e, 0x5f, 0x50, 0x45, 0x4e,
	0x47, 0x50, 0x45, 0x4e, 0x47, 0x48, 0x55, 0x10, 0x30, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4e,
	0x5f, 0x48, 0x55, 0x4e, 0x59, 0x49, 0x53, 0x45, 0x10, 0x31, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41,
	0x4e, 0x5f, 0x53, 0x41, 0x4e, 0x53, 0x45, 0x53, 0x41, 0x4e, 0x42, 0x55, 0x47, 0x41, 0x4f, 0x10,
	0x32, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4e, 0x5f, 0x57, 0x55, 0x4d, 0x45, 0x4e, 0x51, 0x49,
	0x10, 0x33, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x51, 0x49,
	0x55, 0x52, 0x45, 0x4e, 0x10, 0x34, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x48,
	0x55, 0x41, 0x4e, 0x47, 0x41, 0x4e, 0x47, 0x41, 0x4e, 0x47, 0x10, 0x35, 0x12, 0x14, 0x0a, 0x10,
	0x46, 0x41, 0x4e, 0x5f, 0x53, 0x48, 0x55, 0x41, 0x4e, 0x47, 0x4a, 0x49, 0x41, 0x4e, 0x4b, 0x45,
	0x10, 0x36, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x44, 0x41,
	0x49, 0x59, 0x41, 0x4f, 0x10, 0x37, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x4e, 0x5f, 0x42, 0x55,
	0x51, 0x49, 0x55, 0x52, 0x45, 0x4e, 0x10, 0x38, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x4e, 0x5f,
	0x53, 0x48, 0x55, 0x41, 0x4e, 0x47, 0x4d, 0x49, 0x4e, 0x47, 0x47, 0x41, 0x4e, 0x47, 0x10, 0x39,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4e, 0x5f, 0x48, 0x55, 0x4a, 0x55, 0x45, 0x5a, 0x48, 0x41,
	0x4e, 0x47, 0x10, 0x3a, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x4e, 0x5f, 0x4a, 0x49, 0x41, 0x4e,
	0x4b, 0x45, 0x10, 0x3b, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4e,
	0x46, 0x45, 0x4e, 0x47, 0x4b, 0x45, 0x10, 0x3c, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x4e, 0x5f,
	0x4d, 0x45, 0x4e, 0x46, 0x45, 0x4e, 0x47, 0x4b, 0x45, 0x10, 0x3d, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x41, 0x4e, 0x5f, 0x4d, 0x45, 0x4e, 0x51, 0x49, 0x41, 0x4e, 0x51, 0x49, 0x4e, 0x47, 0x10, 0x3e,
	0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x4e, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x48, 0x55, 0x10, 0x3f,
	0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x55, 0x49, 0x59, 0x49, 0x10,
	0x40, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x48, 0x55, 0x41, 0x4e, 0x47, 0x54,
	0x4f, 0x4e, 0x47, 0x4b, 0x45, 0x10, 0x41, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4e, 0x5f, 0x53,
	0x48, 0x55, 0x41, 0x4e, 0x47, 0x41, 0x4e, 0x4b, 0x45, 0x10, 0x42, 0x12, 0x0e, 0x0a, 0x0a, 0x46,
	0x41, 0x4e, 0x5f, 0x41, 0x4e, 0x47, 0x41, 0x4e, 0x47, 0x10, 0x43, 0x12, 0x0f, 0x0a, 0x0b, 0x46,
	0x41, 0x4e, 0x5f, 0x44, 0x55, 0x41, 0x4e, 0x59, 0x41, 0x4f, 0x10, 0x44, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x41, 0x4e, 0x5f, 0x59, 0x49, 0x42, 0x41, 0x4e, 0x47, 0x41, 0x4f, 0x10, 0x45, 0x12, 0x13,
	0x0a, 0x0f, 0x46, 0x41, 0x4e, 0x5f, 0x58, 0x49, 0x58, 0x49, 0x41, 0x4e, 0x47, 0x46, 0x45, 0x4e,
	0x47, 0x10, 0x46, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4e, 0x5f, 0x4c, 0x49, 0x41, 0x4e, 0x4c,
	0x49, 0x55, 0x10, 0x47, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x4e, 0x5f, 0x4c, 0x41, 0x4f, 0x53,
	0x48, 0x41, 0x4f, 0x46, 0x55, 0x10, 0x48, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x4e, 0x5f, 0x59,
	0x41, 0x4f, 0x4a, 0x49, 0x55, 0x4b, 0x45, 0x10, 0x49, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x4e,
	0x5f, 0x4d, 0x49, 0x4e, 0x47, 0x47, 0x41, 0x4e, 0x47, 0x10, 0x4a, 0x12, 0x10, 0x0a, 0x0c, 0x46,
	0x41, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x59, 0x49, 0x4d, 0x45, 0x4e, 0x10, 0x4b, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x41, 0x4e, 0x5f, 0x57, 0x55, 0x5a, 0x49, 0x10, 0x4c, 0x12, 0x11, 0x0a, 0x0d, 0x46,
	0x41, 0x4e, 0x5f, 0x42, 0x49, 0x41, 0x4e, 0x5a, 0x48, 0x41, 0x4e, 0x47, 0x10, 0x4d, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x41, 0x4e, 0x5f, 0x4b, 0x41, 0x4e, 0x5a, 0x48, 0x41, 0x4e, 0x47, 0x10, 0x4e,
	0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x4e, 0x5f, 0x44, 0x41, 0x4e, 0x44, 0x49, 0x41, 0x4f, 0x4a,
	0x49, 0x41, 0x4e, 0x47, 0x10, 0x4f, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x4e, 0x5f, 0x5a, 0x49,
	0x4d, 0x4f, 0x10, 0x50, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x4e, 0x5f, 0x48, 0x55, 0x41, 0x50,
	0x41, 0x49, 0x10, 0x51, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x47,
	0x41, 0x4e, 0x47, 0x41, 0x4e, 0x47, 0x10, 0x52, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mahjong_proto_rawDescOnce sync.Once
	file_mahjong_proto_rawDescData = file_mahjong_proto_rawDesc
)

func file_mahjong_proto_rawDescGZIP() []byte {
	file_mahjong_proto_rawDescOnce.Do(func() {
		file_mahjong_proto_rawDescData = protoimpl.X.CompressGZIP(file_mahjong_proto_rawDescData)
	})
	return file_mahjong_proto_rawDescData
}

var file_mahjong_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mahjong_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_mahjong_proto_goTypes = []interface{}{
	(FanT)(0),                           // 0: go.Fan_t
	(*MahjongKeZi)(nil),                 // 1: go.MahjongKeZi
	(*MahjongHint)(nil),                 // 2: go.MahjongHint
	(*MahjongPlayer)(nil),               // 3: go.MahjongPlayer
	(*EnterGameMJResp)(nil),             // 4: go.EnterGameMJResp
	(*MahjongSceneResp)(nil),            // 5: go.MahjongSceneResp
	(*MahjongStateFreeResp)(nil),        // 6: go.MahjongStateFreeResp
	(*MahjongStateDirectResp)(nil),      // 7: go.MahjongStateDirectResp
	(*MahjongStateDecideResp)(nil),      // 8: go.MahjongStateDecideResp
	(*MahjongStateRollDiceResp)(nil),    // 9: go.MahjongStateRollDiceResp
	(*MahjongStateStartResp)(nil),       // 10: go.MahjongStateStartResp
	(*MahjongStatePlayingResp)(nil),     // 11: go.MahjongStatePlayingResp
	(*MahjongStateWaitOperateResp)(nil), // 12: go.MahjongStateWaitOperateResp
	(*MahjongStateOpenResp)(nil),        // 13: go.MahjongStateOpenResp
	(*MahjongStateOverResp)(nil),        // 14: go.MahjongStateOverResp
	(*MahjongReadyReq)(nil),             // 15: go.MahjongReadyReq
	(*MahjongReadyResp)(nil),            // 16: go.MahjongReadyResp
	(*MahjongRollReq)(nil),              // 17: go.MahjongRollReq
	(*MahjongRollResp)(nil),             // 18: go.MahjongRollResp
	(*MahjongOutCardReq)(nil),           // 19: go.MahjongOutCardReq
	(*MahjongOutCardResp)(nil),          // 20: go.MahjongOutCardResp
	(*MahjongOperateReq)(nil),           // 21: go.MahjongOperateReq
	(*MahjongOperateResp)(nil),          // 22: go.MahjongOperateResp
	(*MahjongDealResp)(nil),             // 23: go.MahjongDealResp
	(*MahjongHintResp)(nil),             // 24: go.MahjongHintResp
	(MJOperate)(0),                      // 25: go.MJOperate
	(*PlayerInfo)(nil),                  // 26: go.PlayerInfo
	(Direct)(0),                         // 27: go.Direct
	(*TimeInfo)(nil),                    // 28: go.TimeInfo
}
var file_mahjong_proto_depIdxs = []int32{
	25, // 0: go.MahjongKeZi.Code:type_name -> go.MJOperate
	25, // 1: go.MahjongHint.Code:type_name -> go.MJOperate
	26, // 2: go.MahjongPlayer.MyInfo:type_name -> go.PlayerInfo
	1,  // 3: go.MahjongPlayer.KeZiCards:type_name -> go.MahjongKeZi
	27, // 4: go.MahjongPlayer.MenFeng:type_name -> go.Direct
	27, // 5: go.MahjongPlayer.SitDirect:type_name -> go.Direct
	2,  // 6: go.MahjongPlayer.OpHints:type_name -> go.MahjongHint
	3,  // 7: go.EnterGameMJResp.Player:type_name -> go.MahjongPlayer
	27, // 8: go.MahjongSceneResp.QuanFeng:type_name -> go.Direct
	3,  // 9: go.MahjongSceneResp.AllPlayers:type_name -> go.MahjongPlayer
	28, // 10: go.MahjongStateFreeResp.Times:type_name -> go.TimeInfo
	28, // 11: go.MahjongStateDirectResp.Times:type_name -> go.TimeInfo
	27, // 12: go.MahjongStateDirectResp.MyDirect:type_name -> go.Direct
	28, // 13: go.MahjongStateDecideResp.Times:type_name -> go.TimeInfo
	27, // 14: go.MahjongStateDecideResp.QuanFeng:type_name -> go.Direct
	27, // 15: go.MahjongStateDecideResp.MenFeng:type_name -> go.Direct
	28, // 16: go.MahjongStateRollDiceResp.Times:type_name -> go.TimeInfo
	28, // 17: go.MahjongStateStartResp.Times:type_name -> go.TimeInfo
	28, // 18: go.MahjongStatePlayingResp.Times:type_name -> go.TimeInfo
	28, // 19: go.MahjongStateWaitOperateResp.Times:type_name -> go.TimeInfo
	28, // 20: go.MahjongStateOpenResp.Times:type_name -> go.TimeInfo
	3,  // 21: go.MahjongStateOpenResp.AllPlayers:type_name -> go.MahjongPlayer
	28, // 22: go.MahjongStateOverResp.Times:type_name -> go.TimeInfo
	25, // 23: go.MahjongOperateReq.Code:type_name -> go.MJOperate
	25, // 24: go.MahjongOperateResp.Code:type_name -> go.MJOperate
	2,  // 25: go.MahjongHintResp.Hints:type_name -> go.MahjongHint
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_mahjong_proto_init() }
func file_mahjong_proto_init() {
	if File_mahjong_proto != nil {
		return
	}
	file_gamecomm_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mahjong_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongKeZi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterGameMJResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSceneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongStateFreeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongStateDirectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongStateDecideResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongStateRollDiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongStateStartResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongStatePlayingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongStateWaitOperateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongStateOpenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongStateOverResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongReadyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongReadyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongRollReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongRollResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongOutCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongOutCardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongOperateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongOperateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongDealResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjong_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongHintResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mahjong_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mahjong_proto_goTypes,
		DependencyIndexes: file_mahjong_proto_depIdxs,
		EnumInfos:         file_mahjong_proto_enumTypes,
		MessageInfos:      file_mahjong_proto_msgTypes,
	}.Build()
	File_mahjong_proto = out.File
	file_mahjong_proto_rawDesc = nil
	file_mahjong_proto_goTypes = nil
	file_mahjong_proto_depIdxs = nil
}
