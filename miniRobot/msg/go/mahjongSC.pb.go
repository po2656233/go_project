// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: mahjongSC.proto

package _go

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//番种()
type FanSCT int32

const (
	FanSCT_FAN_SC_INVALID FanSCT = 0 //无效番种
)

// Enum value maps for FanSCT.
var (
	FanSCT_name = map[int32]string{
		0: "FAN_SC_INVALID",
	}
	FanSCT_value = map[string]int32{
		"FAN_SC_INVALID": 0,
	}
)

func (x FanSCT) Enum() *FanSCT {
	p := new(FanSCT)
	*p = x
	return p
}

func (x FanSCT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FanSCT) Descriptor() protoreflect.EnumDescriptor {
	return file_mahjongSC_proto_enumTypes[0].Descriptor()
}

func (FanSCT) Type() protoreflect.EnumType {
	return &file_mahjongSC_proto_enumTypes[0]
}

func (x FanSCT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FanSCT.Descriptor instead.
func (FanSCT) EnumDescriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{0}
}

// kindID 3006
////////////////////牌值定义/////////////////////////////
//		1 ~ 9 : 一万 ~ 9万
//		11 ~ 19 : 一条 ~ 9条
//		21 ~ 29 : 一筒 ~ 9筒
//		31 ~ 34 : 东、南、西、北风
//		41 : 发财
//		42 : 红中
//		43 : 白板
//		51 ~ 54 : 春夏秋冬
//		61 ~ 64 : 四种花色(梅兰竹菊)
/////////////////////玩家座位//////////////////////////////
//        骰子方位转换(弃用)
//    东 : 1,5,9  代表东
//    南 : 2,6,10 代表南
//    西 : 3,7,11 代表西
//    北 : 4,8,12 代表北
//    通过摸东、南、西、北风决定方位
/////////////////////风圈解义//////////////////////////////
// 一场麻将里有4个风圈（第一圈为东风圈、第二圈为南风圈、第三圈为西风圈、第四圈为北风圈）
// 每个风圈里有4局（第一局为东风局、第二局为南风局、第三局为西风局、第四局为北风局）
// 国标麻将，轮流坐庄，没有连续坐庄一说。
/////////////////////门风解义//////////////////////////////
// 门前发牌的那一家,门风为东，然后依照逆时钟方向计算
/////////////////////番型解义(请看文件末部)///////////////////
//刻子
type MahjongSCKeZi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []int32   `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`
	Code  MJOperate `protobuf:"varint,2,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"`
	ByUid uint64    `protobuf:"varint,3,opt,name=ByUid,proto3" json:"ByUid,omitempty"` // 由谁提供
}

func (x *MahjongSCKeZi) Reset() {
	*x = MahjongSCKeZi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCKeZi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCKeZi) ProtoMessage() {}

func (x *MahjongSCKeZi) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCKeZi.ProtoReflect.Descriptor instead.
func (*MahjongSCKeZi) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{0}
}

func (x *MahjongSCKeZi) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MahjongSCKeZi) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongSCKeZi) GetByUid() uint64 {
	if x != nil {
		return x.ByUid
	}
	return 0
}

//提示
type MahjongSCHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  MJOperate `protobuf:"varint,1,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码
	Cards []int32   `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 听哪几张牌| 胡牌和自摸皆为一张
	ByUid uint64    `protobuf:"varint,3,opt,name=ByUid,proto3" json:"ByUid,omitempty"`                 // 由谁提供
}

func (x *MahjongSCHint) Reset() {
	*x = MahjongSCHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCHint) ProtoMessage() {}

func (x *MahjongSCHint) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCHint.ProtoReflect.Descriptor instead.
func (*MahjongSCHint) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{1}
}

func (x *MahjongSCHint) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongSCHint) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MahjongSCHint) GetByUid() uint64 {
	if x != nil {
		return x.ByUid
	}
	return 0
}

//麻将玩家信息
type MahjongSCPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyInfo     *PlayerInfo      `protobuf:"bytes,1,opt,name=MyInfo,proto3" json:"MyInfo,omitempty"`                       //
	HandCards  []int32          `protobuf:"varint,2,rep,packed,name=HandCards,proto3" json:"HandCards,omitempty"`         //手牌
	KeZiCards  []*MahjongSCKeZi `protobuf:"bytes,3,rep,name=KeZiCards,proto3" json:"KeZiCards,omitempty"`                 // 吃牌 桌牌:明在桌面上的牌,即碰、吃、杠后的牌
	TableCards []int32          `protobuf:"varint,4,rep,packed,name=TableCards,proto3" json:"TableCards,omitempty"`       //玩家的桌面牌值
	IsTing     bool             `protobuf:"varint,5,opt,name=IsTing,proto3" json:"IsTing,omitempty"`                      //是否听牌
	GainScore  int64            `protobuf:"varint,6,opt,name=GainScore,proto3" json:"GainScore,omitempty"`                //输赢分值
	TotalScore int64            `protobuf:"varint,7,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`              //总积分(当不为系统房时,该分值可以为负分)
	MenFeng    Direct           `protobuf:"varint,8,opt,name=MenFeng,proto3,enum=go.Direct" json:"MenFeng,omitempty"`     //门风(庄家==东风)
	SitDirect  Direct           `protobuf:"varint,9,opt,name=SitDirect,proto3,enum=go.Direct" json:"SitDirect,omitempty"` //座位方位
	OpHints    []*MahjongSCHint `protobuf:"bytes,10,rep,name=OpHints,proto3" json:"OpHints,omitempty"`                    //玩家可操作(恢复场景)
}

func (x *MahjongSCPlayer) Reset() {
	*x = MahjongSCPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCPlayer) ProtoMessage() {}

func (x *MahjongSCPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCPlayer.ProtoReflect.Descriptor instead.
func (*MahjongSCPlayer) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{2}
}

func (x *MahjongSCPlayer) GetMyInfo() *PlayerInfo {
	if x != nil {
		return x.MyInfo
	}
	return nil
}

func (x *MahjongSCPlayer) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *MahjongSCPlayer) GetKeZiCards() []*MahjongSCKeZi {
	if x != nil {
		return x.KeZiCards
	}
	return nil
}

func (x *MahjongSCPlayer) GetTableCards() []int32 {
	if x != nil {
		return x.TableCards
	}
	return nil
}

func (x *MahjongSCPlayer) GetIsTing() bool {
	if x != nil {
		return x.IsTing
	}
	return false
}

func (x *MahjongSCPlayer) GetGainScore() int64 {
	if x != nil {
		return x.GainScore
	}
	return 0
}

func (x *MahjongSCPlayer) GetTotalScore() int64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *MahjongSCPlayer) GetMenFeng() Direct {
	if x != nil {
		return x.MenFeng
	}
	return Direct_Centre
}

func (x *MahjongSCPlayer) GetSitDirect() Direct {
	if x != nil {
		return x.SitDirect
	}
	return Direct_Centre
}

func (x *MahjongSCPlayer) GetOpHints() []*MahjongSCHint {
	if x != nil {
		return x.OpHints
	}
	return nil
}

//入场
type EnterGameMJSCResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID   uint64           `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`     //游戏标识
	ChairNum uint32           `protobuf:"varint,2,opt,name=ChairNum,proto3" json:"ChairNum,omitempty"` //椅子编号(不满足req的此项时,将由系统分配,并返回提示)
	Player   *MahjongSCPlayer `protobuf:"bytes,3,opt,name=Player,proto3" json:"Player,omitempty"`
}

func (x *EnterGameMJSCResp) Reset() {
	*x = EnterGameMJSCResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterGameMJSCResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterGameMJSCResp) ProtoMessage() {}

func (x *EnterGameMJSCResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterGameMJSCResp.ProtoReflect.Descriptor instead.
func (*EnterGameMJSCResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{3}
}

func (x *EnterGameMJSCResp) GetGameID() uint64 {
	if x != nil {
		return x.GameID
	}
	return 0
}

func (x *EnterGameMJSCResp) GetChairNum() uint32 {
	if x != nil {
		return x.ChairNum
	}
	return 0
}

func (x *EnterGameMJSCResp) GetPlayer() *MahjongSCPlayer {
	if x != nil {
		return x.Player
	}
	return nil
}

//场景
type MahjongSCSceneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStamp   int64              `protobuf:"varint,1,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`              // 时间戳
	RunCount    int32              `protobuf:"varint,2,opt,name=RunCount,proto3" json:"RunCount,omitempty"`                // 当前局数
	RemainCount int32              `protobuf:"varint,3,opt,name=RemainCount,proto3" json:"RemainCount,omitempty"`          // 剩余张数
	BankerID    uint64             `protobuf:"varint,4,opt,name=BankerID,proto3" json:"BankerID,omitempty"`                // 庄家ID
	CurrentID   uint64             `protobuf:"varint,5,opt,name=CurrentID,proto3" json:"CurrentID,omitempty"`              // 当前玩家ID
	Inning      string             `protobuf:"bytes,6,opt,name=Inning,proto3" json:"Inning,omitempty"`                     // 牌局号
	HuCard      int32              `protobuf:"varint,7,opt,name=HuCard,proto3" json:"HuCard,omitempty"`                    // 胡牌,或自摸时的摸起的最后一张
	QuanFeng    Direct             `protobuf:"varint,8,opt,name=QuanFeng,proto3,enum=go.Direct" json:"QuanFeng,omitempty"` // 当前局的圈风
	StartPos    int32              `protobuf:"varint,9,opt,name=StartPos,proto3" json:"StartPos,omitempty"`                // 抓牌起始位置(即保留不抓取的牌墙)
	AllPlayers  []*MahjongSCPlayer `protobuf:"bytes,10,rep,name=AllPlayers,proto3" json:"AllPlayers,omitempty"`            //玩家列表(吃碰杠)
}

func (x *MahjongSCSceneResp) Reset() {
	*x = MahjongSCSceneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCSceneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCSceneResp) ProtoMessage() {}

func (x *MahjongSCSceneResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCSceneResp.ProtoReflect.Descriptor instead.
func (*MahjongSCSceneResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{4}
}

func (x *MahjongSCSceneResp) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *MahjongSCSceneResp) GetRunCount() int32 {
	if x != nil {
		return x.RunCount
	}
	return 0
}

func (x *MahjongSCSceneResp) GetRemainCount() int32 {
	if x != nil {
		return x.RemainCount
	}
	return 0
}

func (x *MahjongSCSceneResp) GetBankerID() uint64 {
	if x != nil {
		return x.BankerID
	}
	return 0
}

func (x *MahjongSCSceneResp) GetCurrentID() uint64 {
	if x != nil {
		return x.CurrentID
	}
	return 0
}

func (x *MahjongSCSceneResp) GetInning() string {
	if x != nil {
		return x.Inning
	}
	return ""
}

func (x *MahjongSCSceneResp) GetHuCard() int32 {
	if x != nil {
		return x.HuCard
	}
	return 0
}

func (x *MahjongSCSceneResp) GetQuanFeng() Direct {
	if x != nil {
		return x.QuanFeng
	}
	return Direct_Centre
}

func (x *MahjongSCSceneResp) GetStartPos() int32 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

func (x *MahjongSCSceneResp) GetAllPlayers() []*MahjongSCPlayer {
	if x != nil {
		return x.AllPlayers
	}
	return nil
}

//状态
// 服务端推送
//(空闲 - Free)
type MahjongSCStateFreeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times  *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	Inning string    `protobuf:"bytes,2,opt,name=Inning,proto3" json:"Inning,omitempty"` // 牌局号
}

func (x *MahjongSCStateFreeResp) Reset() {
	*x = MahjongSCStateFreeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCStateFreeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCStateFreeResp) ProtoMessage() {}

func (x *MahjongSCStateFreeResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCStateFreeResp.ProtoReflect.Descriptor instead.
func (*MahjongSCStateFreeResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{5}
}

func (x *MahjongSCStateFreeResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongSCStateFreeResp) GetInning() string {
	if x != nil {
		return x.Inning
	}
	return ""
}

//方位 - Direct (调整座位:仅在第一局开始需决定所座方位,或座位替换新玩家)
type MahjongSCStateDirectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times    *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	MyDirect Direct    `protobuf:"varint,2,opt,name=MyDirect,proto3,enum=go.Direct" json:"MyDirect,omitempty"` //东南西北(系统决定)
}

func (x *MahjongSCStateDirectResp) Reset() {
	*x = MahjongSCStateDirectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCStateDirectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCStateDirectResp) ProtoMessage() {}

func (x *MahjongSCStateDirectResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCStateDirectResp.ProtoReflect.Descriptor instead.
func (*MahjongSCStateDirectResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{6}
}

func (x *MahjongSCStateDirectResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongSCStateDirectResp) GetMyDirect() Direct {
	if x != nil {
		return x.MyDirect
	}
	return Direct_Centre
}

//定庄 - Decide 系统定庄
type MahjongSCStateDecideResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times    *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	BankerID uint64    `protobuf:"varint,2,opt,name=BankerID,proto3" json:"BankerID,omitempty"`                // 首局默认座位东方的为庄家
	QuanFeng Direct    `protobuf:"varint,3,opt,name=QuanFeng,proto3,enum=go.Direct" json:"QuanFeng,omitempty"` // 当前局的圈风
	MenFeng  Direct    `protobuf:"varint,4,opt,name=MenFeng,proto3,enum=go.Direct" json:"MenFeng,omitempty"`   // 玩家的门风
}

func (x *MahjongSCStateDecideResp) Reset() {
	*x = MahjongSCStateDecideResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCStateDecideResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCStateDecideResp) ProtoMessage() {}

func (x *MahjongSCStateDecideResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCStateDecideResp.ProtoReflect.Descriptor instead.
func (*MahjongSCStateDecideResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{7}
}

func (x *MahjongSCStateDecideResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongSCStateDecideResp) GetBankerID() uint64 {
	if x != nil {
		return x.BankerID
	}
	return 0
}

func (x *MahjongSCStateDecideResp) GetQuanFeng() Direct {
	if x != nil {
		return x.QuanFeng
	}
	return Direct_Centre
}

func (x *MahjongSCStateDecideResp) GetMenFeng() Direct {
	if x != nil {
		return x.MenFeng
	}
	return Direct_Centre
}

//开始掷骰子 - RollDice 注:决定牌堆的起始位置
type MahjongSCStateRollDiceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongSCStateRollDiceResp) Reset() {
	*x = MahjongSCStateRollDiceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCStateRollDiceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCStateRollDiceResp) ProtoMessage() {}

func (x *MahjongSCStateRollDiceResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCStateRollDiceResp.ProtoReflect.Descriptor instead.
func (*MahjongSCStateRollDiceResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{8}
}

func (x *MahjongSCStateRollDiceResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//(开始游戏) - Start
type MahjongSCStateStartResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times    *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	StartPos int32     `protobuf:"varint,2,opt,name=StartPos,proto3" json:"StartPos,omitempty"` //抓牌起始位置(即保留不抓取的牌墙)
}

func (x *MahjongSCStateStartResp) Reset() {
	*x = MahjongSCStateStartResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCStateStartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCStateStartResp) ProtoMessage() {}

func (x *MahjongSCStateStartResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCStateStartResp.ProtoReflect.Descriptor instead.
func (*MahjongSCStateStartResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{9}
}

func (x *MahjongSCStateStartResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongSCStateStartResp) GetStartPos() int32 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

//(游戏中) - Playing
type MahjongSCStatePlayingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times  *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	UserID uint64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"` // 轮到谁
	Card   int32     `protobuf:"varint,3,opt,name=Card,proto3" json:"Card,omitempty"`     // 只有UserID的玩家有牌值
}

func (x *MahjongSCStatePlayingResp) Reset() {
	*x = MahjongSCStatePlayingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCStatePlayingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCStatePlayingResp) ProtoMessage() {}

func (x *MahjongSCStatePlayingResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCStatePlayingResp.ProtoReflect.Descriptor instead.
func (*MahjongSCStatePlayingResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{10}
}

func (x *MahjongSCStatePlayingResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongSCStatePlayingResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongSCStatePlayingResp) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

//等待操作(仅对有提示的玩家提供)
type MahjongSCStateWaitOperateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongSCStateWaitOperateResp) Reset() {
	*x = MahjongSCStateWaitOperateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCStateWaitOperateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCStateWaitOperateResp) ProtoMessage() {}

func (x *MahjongSCStateWaitOperateResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCStateWaitOperateResp.ProtoReflect.Descriptor instead.
func (*MahjongSCStateWaitOperateResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{11}
}

func (x *MahjongSCStateWaitOperateResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//(开奖) - Opening
type MahjongSCStateOpenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times      *TimeInfo          `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
	IsFlow     bool               `protobuf:"varint,2,opt,name=IsFlow,proto3" json:"IsFlow,omitempty"`        // 是否流局
	HuCard     int32              `protobuf:"varint,3,opt,name=HuCard,proto3" json:"HuCard,omitempty"`        // 胡牌,或自摸时的摸起的最后一张
	WinnerID   uint64             `protobuf:"varint,4,opt,name=WinnerID,proto3" json:"WinnerID,omitempty"`    //胜利者ID（流局时为0）
	Fans       []byte             `protobuf:"bytes,5,opt,name=Fans,proto3" json:"Fans,omitempty"`             //番型列表 每个元素对应一个番型
	FanCount   int32              `protobuf:"varint,6,opt,name=FanCount,proto3" json:"FanCount,omitempty"`    //共计番数
	AllPlayers []*MahjongSCPlayer `protobuf:"bytes,7,rep,name=AllPlayers,proto3" json:"AllPlayers,omitempty"` //所有玩家得分
}

func (x *MahjongSCStateOpenResp) Reset() {
	*x = MahjongSCStateOpenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCStateOpenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCStateOpenResp) ProtoMessage() {}

func (x *MahjongSCStateOpenResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCStateOpenResp.ProtoReflect.Descriptor instead.
func (*MahjongSCStateOpenResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{12}
}

func (x *MahjongSCStateOpenResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *MahjongSCStateOpenResp) GetIsFlow() bool {
	if x != nil {
		return x.IsFlow
	}
	return false
}

func (x *MahjongSCStateOpenResp) GetHuCard() int32 {
	if x != nil {
		return x.HuCard
	}
	return 0
}

func (x *MahjongSCStateOpenResp) GetWinnerID() uint64 {
	if x != nil {
		return x.WinnerID
	}
	return 0
}

func (x *MahjongSCStateOpenResp) GetFans() []byte {
	if x != nil {
		return x.Fans
	}
	return nil
}

func (x *MahjongSCStateOpenResp) GetFanCount() int32 {
	if x != nil {
		return x.FanCount
	}
	return 0
}

func (x *MahjongSCStateOpenResp) GetAllPlayers() []*MahjongSCPlayer {
	if x != nil {
		return x.AllPlayers
	}
	return nil
}

//(结束) - Over
type MahjongSCStateOverResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *TimeInfo `protobuf:"bytes,1,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *MahjongSCStateOverResp) Reset() {
	*x = MahjongSCStateOverResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCStateOverResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCStateOverResp) ProtoMessage() {}

func (x *MahjongSCStateOverResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCStateOverResp.ProtoReflect.Descriptor instead.
func (*MahjongSCStateOverResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{13}
}

func (x *MahjongSCStateOverResp) GetTimes() *TimeInfo {
	if x != nil {
		return x.Times
	}
	return nil
}

//////////////////////////////////////////////
//准备
type MahjongSCReadyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReady bool `protobuf:"varint,1,opt,name=IsReady,proto3" json:"IsReady,omitempty"` // 玩家准备，可以取消准备
}

func (x *MahjongSCReadyReq) Reset() {
	*x = MahjongSCReadyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCReadyReq) ProtoMessage() {}

func (x *MahjongSCReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCReadyReq.ProtoReflect.Descriptor instead.
func (*MahjongSCReadyReq) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{14}
}

func (x *MahjongSCReadyReq) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

type MahjongSCReadyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IsReady bool   `protobuf:"varint,2,opt,name=IsReady,proto3" json:"IsReady,omitempty"` // 玩家准备，可以取消准备
}

func (x *MahjongSCReadyResp) Reset() {
	*x = MahjongSCReadyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCReadyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCReadyResp) ProtoMessage() {}

func (x *MahjongSCReadyResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCReadyResp.ProtoReflect.Descriptor instead.
func (*MahjongSCReadyResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{15}
}

func (x *MahjongSCReadyResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongSCReadyResp) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

//
//庄家扔骰子
type MahjongSCRollReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongSCRollReq) Reset() {
	*x = MahjongSCRollReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCRollReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCRollReq) ProtoMessage() {}

func (x *MahjongSCRollReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCRollReq.ProtoReflect.Descriptor instead.
func (*MahjongSCRollReq) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{16}
}

type MahjongSCRollResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Dice   []byte `protobuf:"bytes,2,opt,name=Dice,proto3" json:"Dice,omitempty"` //骰子决定,起抓牌位置
}

func (x *MahjongSCRollResp) Reset() {
	*x = MahjongSCRollResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCRollResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCRollResp) ProtoMessage() {}

func (x *MahjongSCRollResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCRollResp.ProtoReflect.Descriptor instead.
func (*MahjongSCRollResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{17}
}

func (x *MahjongSCRollResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongSCRollResp) GetDice() []byte {
	if x != nil {
		return x.Dice
	}
	return nil
}

// 玩家打出去的牌
type MahjongSCOutCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card int32 `protobuf:"varint,1,opt,name=Card,proto3" json:"Card,omitempty"` //
}

func (x *MahjongSCOutCardReq) Reset() {
	*x = MahjongSCOutCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCOutCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCOutCardReq) ProtoMessage() {}

func (x *MahjongSCOutCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCOutCardReq.ProtoReflect.Descriptor instead.
func (*MahjongSCOutCardReq) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{18}
}

func (x *MahjongSCOutCardReq) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

type MahjongSCOutCardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"` // 玩家ID
	Card   int32  `protobuf:"varint,2,opt,name=Card,proto3" json:"Card,omitempty"`     //
}

func (x *MahjongSCOutCardResp) Reset() {
	*x = MahjongSCOutCardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCOutCardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCOutCardResp) ProtoMessage() {}

func (x *MahjongSCOutCardResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCOutCardResp.ProtoReflect.Descriptor instead.
func (*MahjongSCOutCardResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{19}
}

func (x *MahjongSCOutCardResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongSCOutCardResp) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

// 操作
type MahjongSCOperateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  MJOperate `protobuf:"varint,1,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码 pass表示弃牌
	Cards []int32   `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 吃|碰|杠 时的手牌
}

func (x *MahjongSCOperateReq) Reset() {
	*x = MahjongSCOperateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCOperateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCOperateReq) ProtoMessage() {}

func (x *MahjongSCOperateReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCOperateReq.ProtoReflect.Descriptor instead.
func (*MahjongSCOperateReq) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{20}
}

func (x *MahjongSCOperateReq) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongSCOperateReq) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

type MahjongSCOperateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64    `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`               // 玩家ID
	Code   MJOperate `protobuf:"varint,2,opt,name=Code,proto3,enum=go.MJOperate" json:"Code,omitempty"` // 操作码
	Cards  []int32   `protobuf:"varint,3,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          // 吃|碰|杠 时的组合牌
}

func (x *MahjongSCOperateResp) Reset() {
	*x = MahjongSCOperateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCOperateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCOperateResp) ProtoMessage() {}

func (x *MahjongSCOperateResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCOperateResp.ProtoReflect.Descriptor instead.
func (*MahjongSCOperateResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{21}
}

func (x *MahjongSCOperateResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongSCOperateResp) GetCode() MJOperate {
	if x != nil {
		return x.Code
	}
	return MJOperate_NULL
}

func (x *MahjongSCOperateResp) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

////////////////////////////////
//
//发牌
type MahjongSCDealResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    uint64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`              // 玩家ID
	CurPos    int32   `protobuf:"varint,2,opt,name=CurPos,proto3" json:"CurPos,omitempty"`              // 抓牌起始位置
	HandCards []int32 `protobuf:"varint,3,rep,packed,name=HandCards,proto3" json:"HandCards,omitempty"` // 玩家的手牌(座位上的玩家才有,且只能拿到自己的牌值)
}

func (x *MahjongSCDealResp) Reset() {
	*x = MahjongSCDealResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCDealResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCDealResp) ProtoMessage() {}

func (x *MahjongSCDealResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCDealResp.ProtoReflect.Descriptor instead.
func (*MahjongSCDealResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{22}
}

func (x *MahjongSCDealResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongSCDealResp) GetCurPos() int32 {
	if x != nil {
		return x.CurPos
	}
	return 0
}

func (x *MahjongSCDealResp) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

//
// 玩家只能收到自己的
type MahjongSCHintResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID uint64           `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"` // 玩家ID
	Hints  []*MahjongSCHint `protobuf:"bytes,2,rep,name=Hints,proto3" json:"Hints,omitempty"`    //提示 注意:吃牌时,有多种组合 cards仅提供玩家手牌牌值
}

func (x *MahjongSCHintResp) Reset() {
	*x = MahjongSCHintResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongSC_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongSCHintResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongSCHintResp) ProtoMessage() {}

func (x *MahjongSCHintResp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongSC_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongSCHintResp.ProtoReflect.Descriptor instead.
func (*MahjongSCHintResp) Descriptor() ([]byte, []int) {
	return file_mahjongSC_proto_rawDescGZIP(), []int{23}
}

func (x *MahjongSCHintResp) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MahjongSCHintResp) GetHints() []*MahjongSCHint {
	if x != nil {
		return x.Hints
	}
	return nil
}

var File_mahjongSC_proto protoreflect.FileDescriptor

var file_mahjongSC_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x67, 0x6f, 0x1a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x0d, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x53, 0x43, 0x4b, 0x65, 0x5a, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x2e,
	0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x42, 0x79, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x42, 0x79, 0x55, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x0d, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x53, 0x43, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x42, 0x79, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x42, 0x79, 0x55, 0x69, 0x64, 0x22, 0xfb, 0x02, 0x0a, 0x0f, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x53, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x4d, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x4d, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x2f, 0x0a, 0x09, 0x4b, 0x65, 0x5a, 0x69, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53,
	0x43, 0x4b, 0x65, 0x5a, 0x69, 0x52, 0x09, 0x4b, 0x65, 0x5a, 0x69, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x54, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x49, 0x73, 0x54, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x69, 0x6e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x61, 0x69,
	0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x6e, 0x46, 0x65, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x4d, 0x65, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x09,
	0x53, 0x69, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x09, 0x53, 0x69, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x4f, 0x70, 0x48, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x4f, 0x70, 0x48, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x74, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x4a, 0x53, 0x43, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x43, 0x68, 0x61, 0x69, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x06,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67,
	0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xd3, 0x02, 0x0a, 0x12, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x48, 0x75, 0x43, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x48, 0x75, 0x43, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x46, 0x65,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x41, 0x6c,
	0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x0a, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22,
	0x54, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x66, 0x0a, 0x18, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x53, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x4d, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x08, 0x4d, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0xa8, 0x01,
	0x0a, 0x18, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x08, 0x51, 0x75,
	0x61, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67,
	0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x46, 0x65,
	0x6e, 0x67, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52,
	0x07, 0x4d, 0x65, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x22, 0x40, 0x0a, 0x1a, 0x4d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x53, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x44, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x17, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x22, 0x6b, 0x0a, 0x19, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x53, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61,
	0x72, 0x64, 0x22, 0x43, 0x0a, 0x1d, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x53, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x46, 0x6c, 0x6f, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x16,
	0x0a, 0x06, 0x48, 0x75, 0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x48, 0x75, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x46, 0x61, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x53, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a, 0x41, 0x6c, 0x6c,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x3c, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x53, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x22, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x11, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x53, 0x43, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x22, 0x46, 0x0a, 0x12, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53,
	0x43, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x12, 0x0a, 0x10,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x22, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x52, 0x6f, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x44, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x69, 0x63,
	0x65, 0x22, 0x29, 0x0a, 0x13, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x4f, 0x75,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x22, 0x42, 0x0a, 0x14,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64,
	0x22, 0x4e, 0x0a, 0x13, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x67, 0x0a, 0x14, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x21, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x4a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x11, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x75, 0x72, 0x50, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x75, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x54, 0x0a, 0x11,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x05, 0x48, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x2e, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x53, 0x43, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x48, 0x69, 0x6e,
	0x74, 0x73, 0x2a, 0x1d, 0x0a, 0x07, 0x46, 0x61, 0x6e, 0x53, 0x43, 0x5f, 0x74, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x41, 0x4e, 0x5f, 0x53, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mahjongSC_proto_rawDescOnce sync.Once
	file_mahjongSC_proto_rawDescData = file_mahjongSC_proto_rawDesc
)

func file_mahjongSC_proto_rawDescGZIP() []byte {
	file_mahjongSC_proto_rawDescOnce.Do(func() {
		file_mahjongSC_proto_rawDescData = protoimpl.X.CompressGZIP(file_mahjongSC_proto_rawDescData)
	})
	return file_mahjongSC_proto_rawDescData
}

var file_mahjongSC_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mahjongSC_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_mahjongSC_proto_goTypes = []interface{}{
	(FanSCT)(0),                           // 0: go.FanSC_t
	(*MahjongSCKeZi)(nil),                 // 1: go.MahjongSCKeZi
	(*MahjongSCHint)(nil),                 // 2: go.MahjongSCHint
	(*MahjongSCPlayer)(nil),               // 3: go.MahjongSCPlayer
	(*EnterGameMJSCResp)(nil),             // 4: go.EnterGameMJSCResp
	(*MahjongSCSceneResp)(nil),            // 5: go.MahjongSCSceneResp
	(*MahjongSCStateFreeResp)(nil),        // 6: go.MahjongSCStateFreeResp
	(*MahjongSCStateDirectResp)(nil),      // 7: go.MahjongSCStateDirectResp
	(*MahjongSCStateDecideResp)(nil),      // 8: go.MahjongSCStateDecideResp
	(*MahjongSCStateRollDiceResp)(nil),    // 9: go.MahjongSCStateRollDiceResp
	(*MahjongSCStateStartResp)(nil),       // 10: go.MahjongSCStateStartResp
	(*MahjongSCStatePlayingResp)(nil),     // 11: go.MahjongSCStatePlayingResp
	(*MahjongSCStateWaitOperateResp)(nil), // 12: go.MahjongSCStateWaitOperateResp
	(*MahjongSCStateOpenResp)(nil),        // 13: go.MahjongSCStateOpenResp
	(*MahjongSCStateOverResp)(nil),        // 14: go.MahjongSCStateOverResp
	(*MahjongSCReadyReq)(nil),             // 15: go.MahjongSCReadyReq
	(*MahjongSCReadyResp)(nil),            // 16: go.MahjongSCReadyResp
	(*MahjongSCRollReq)(nil),              // 17: go.MahjongSCRollReq
	(*MahjongSCRollResp)(nil),             // 18: go.MahjongSCRollResp
	(*MahjongSCOutCardReq)(nil),           // 19: go.MahjongSCOutCardReq
	(*MahjongSCOutCardResp)(nil),          // 20: go.MahjongSCOutCardResp
	(*MahjongSCOperateReq)(nil),           // 21: go.MahjongSCOperateReq
	(*MahjongSCOperateResp)(nil),          // 22: go.MahjongSCOperateResp
	(*MahjongSCDealResp)(nil),             // 23: go.MahjongSCDealResp
	(*MahjongSCHintResp)(nil),             // 24: go.MahjongSCHintResp
	(MJOperate)(0),                        // 25: go.MJOperate
	(*PlayerInfo)(nil),                    // 26: go.PlayerInfo
	(Direct)(0),                           // 27: go.Direct
	(*TimeInfo)(nil),                      // 28: go.TimeInfo
}
var file_mahjongSC_proto_depIdxs = []int32{
	25, // 0: go.MahjongSCKeZi.Code:type_name -> go.MJOperate
	25, // 1: go.MahjongSCHint.Code:type_name -> go.MJOperate
	26, // 2: go.MahjongSCPlayer.MyInfo:type_name -> go.PlayerInfo
	1,  // 3: go.MahjongSCPlayer.KeZiCards:type_name -> go.MahjongSCKeZi
	27, // 4: go.MahjongSCPlayer.MenFeng:type_name -> go.Direct
	27, // 5: go.MahjongSCPlayer.SitDirect:type_name -> go.Direct
	2,  // 6: go.MahjongSCPlayer.OpHints:type_name -> go.MahjongSCHint
	3,  // 7: go.EnterGameMJSCResp.Player:type_name -> go.MahjongSCPlayer
	27, // 8: go.MahjongSCSceneResp.QuanFeng:type_name -> go.Direct
	3,  // 9: go.MahjongSCSceneResp.AllPlayers:type_name -> go.MahjongSCPlayer
	28, // 10: go.MahjongSCStateFreeResp.Times:type_name -> go.TimeInfo
	28, // 11: go.MahjongSCStateDirectResp.Times:type_name -> go.TimeInfo
	27, // 12: go.MahjongSCStateDirectResp.MyDirect:type_name -> go.Direct
	28, // 13: go.MahjongSCStateDecideResp.Times:type_name -> go.TimeInfo
	27, // 14: go.MahjongSCStateDecideResp.QuanFeng:type_name -> go.Direct
	27, // 15: go.MahjongSCStateDecideResp.MenFeng:type_name -> go.Direct
	28, // 16: go.MahjongSCStateRollDiceResp.Times:type_name -> go.TimeInfo
	28, // 17: go.MahjongSCStateStartResp.Times:type_name -> go.TimeInfo
	28, // 18: go.MahjongSCStatePlayingResp.Times:type_name -> go.TimeInfo
	28, // 19: go.MahjongSCStateWaitOperateResp.Times:type_name -> go.TimeInfo
	28, // 20: go.MahjongSCStateOpenResp.Times:type_name -> go.TimeInfo
	3,  // 21: go.MahjongSCStateOpenResp.AllPlayers:type_name -> go.MahjongSCPlayer
	28, // 22: go.MahjongSCStateOverResp.Times:type_name -> go.TimeInfo
	25, // 23: go.MahjongSCOperateReq.Code:type_name -> go.MJOperate
	25, // 24: go.MahjongSCOperateResp.Code:type_name -> go.MJOperate
	2,  // 25: go.MahjongSCHintResp.Hints:type_name -> go.MahjongSCHint
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_mahjongSC_proto_init() }
func file_mahjongSC_proto_init() {
	if File_mahjongSC_proto != nil {
		return
	}
	file_gamecomm_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mahjongSC_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCKeZi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterGameMJSCResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCSceneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCStateFreeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCStateDirectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCStateDecideResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCStateRollDiceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCStateStartResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCStatePlayingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCStateWaitOperateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCStateOpenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCStateOverResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCReadyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCReadyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCRollReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCRollResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCOutCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCOutCardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCOperateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCOperateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCDealResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongSC_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongSCHintResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mahjongSC_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mahjongSC_proto_goTypes,
		DependencyIndexes: file_mahjongSC_proto_depIdxs,
		EnumInfos:         file_mahjongSC_proto_enumTypes,
		MessageInfos:      file_mahjongSC_proto_msgTypes,
	}.Build()
	File_mahjongSC_proto = out.File
	file_mahjongSC_proto_rawDesc = nil
	file_mahjongSC_proto_goTypes = nil
	file_mahjongSC_proto_depIdxs = nil
}
